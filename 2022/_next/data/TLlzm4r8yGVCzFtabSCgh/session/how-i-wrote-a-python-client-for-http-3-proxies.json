{"pageProps":{"path":"/session/how-i-wrote-a-python-client-for-http-3-proxies","session":{"code":"SHXRMJ","title":"How I wrote a Python client for HTTP/3 proxies","speakers":[{"code":"CNVAFW","name":"Miloslav Pojman","biography":"I build data pipelines for change safety and performance monitoring in Akamai. Our Protocol optimization team implements and deploys standards for the future Internet.\r\n\r\nPreviously, I worked for Seznam.cz, where I moved from complex business applications to big data processing.\r\n\r\nI have a software engineering degree from Czech technical university in Prague, but I started to write webs a long time before studying it.","avatar":"https://program.europython.eu/media/avatars/Miloslav_Pojman_Qfkhusm.jpg","slug":"miloslav-pojman","affiliation":"Akamai Technologies","homepage":"https://pojman.cz","twitter":"@MiloslavPojman","biographySource":{"compiledSource":"var c=Object.defineProperty,d=Object.defineProperties;var f=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var p=(e,t,o)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,a=(e,t)=>{for(var o in t||(t={}))i.call(t,o)&&p(e,o,t[o]);if(r)for(var o of r(t))s.call(t,o)&&p(e,o,t[o]);return e},u=(e,t)=>d(e,f(t));var m=(e,t)=>{var o={};for(var n in e)i.call(e,n)&&t.indexOf(n)<0&&(o[n]=e[n]);if(e!=null&&r)for(var n of r(e))t.indexOf(n)<0&&s.call(e,n)&&(o[n]=e[n]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var n=o,{components:e}=n,t=m(n,[\"components\"]);return mdx(MDXLayout,u(a(a({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"I build data pipelines for change safety and performance monitoring in Akamai. Our Protocol optimization team implements and deploys standards for the future Internet.\"),mdx(\"p\",null,\"Previously, I worked for Seznam.cz, where I moved from complex business applications to big data processing.\"),mdx(\"p\",null,\"I have a software engineering degree from Czech technical university in Prague, but I started to write webs a long time before studying it.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}}],"submission_type":"Talk","slug":"how-i-wrote-a-python-client-for-http-3-proxies","track":"Web","state":"confirmed","abstract":"[MASQUE](https://tools.ietf.org/id/draft-schinazi-masque-01.html) (Multiplexed Application Substrate over QUIC Encryption) is a draft of a new protocol that allows running proxy or VPN services indistinguishable from HTTPS servers. Akamai built a managed proxy service based on the MASQUE protocol [to provide egress proxy](https://www.akamai.com/blog/cloud/powering-and-protecting-online-privacy-icloud-private-relay) for iCloud Private Relay.\r\n \r\nWhile working on the proxy at Akamai, I wrote a Python client for testing the proxy service. The MASQUE protocol can tunnel traffic through HTTP/3 or HTTP/2, but common Python libraries only support HTTP/1.1. The tunneled traffic can use any protocol on top of TCP or UDP, including all HTTP versions, so MASQUE can be proxied through MASQUE for onion routing.\r\n\r\nIn this talk, I will show that the MASQUE proxy design is simple and yet client implementations are complex. To put everything into context, I will recap how HTTP proxies operate and how HTTP versions differ. I will highlight lessons learned from designing a low-level HTTP client using Python asyncio.","abstract_as_a_tweet":"HTTP proxies are not dead! MASQUE protects your privacy by onion routing through HTTP/3 proxies. Can Python HTTP clients support that?","description":"","duration":"30","python_level":"none","domain_level":"some","delivery":"in-person","room":"Wicklow Hall 1","start":"2022-07-14T14:35:00+01:00","end":"2022-07-14T15:05:00+01:00","talks_in_parallel":["8D9LD8","RWKPFX","SE83WQ"],"talks_after":["3HCYQ9","7FNTEJ","JWUZ7E","LCNBCC","NF9HFT","WFJ7XP"],"next_talk_code":"WFJ7XP","prev_talk_code":"BLHK9U","website_url":"https://ep2022.europython.eu/session/how-i-wrote-a-python-client-for-http-3-proxies","type":"Talk","abstractSource":{"compiledSource":"var h=Object.defineProperty,u=Object.defineProperties;var y=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var p=(o,e,t)=>e in o?h(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t,i=(o,e)=>{for(var t in e||(e={}))a.call(e,t)&&p(o,t,e[t]);if(r)for(var t of r(e))l.call(e,t)&&p(o,t,e[t]);return o},s=(o,e)=>u(o,y(e));var c=(o,e)=>{var t={};for(var n in o)a.call(o,n)&&e.indexOf(n)<0&&(t[n]=o[n]);if(o!=null&&r)for(var n of r(o))e.indexOf(n)<0&&l.call(o,n)&&(t[n]=o[n]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var n=t,{components:o}=n,e=c(n,[\"components\"]);return mdx(MDXLayout,s(i(i({},layoutProps),e),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"a\",i({parentName:\"p\"},{href:\"https://tools.ietf.org/id/draft-schinazi-masque-01.html\"}),\"MASQUE\"),\" (Multiplexed Application Substrate over QUIC Encryption) is a draft of a new protocol that allows running proxy or VPN services indistinguishable from HTTPS servers. Akamai built a managed proxy service based on the MASQUE protocol \",mdx(\"a\",i({parentName:\"p\"},{href:\"https://www.akamai.com/blog/cloud/powering-and-protecting-online-privacy-icloud-private-relay\"}),\"to provide egress proxy\"),\" for iCloud Private Relay.\"),mdx(\"p\",null,\"While working on the proxy at Akamai, I wrote a Python client for testing the proxy service. The MASQUE protocol can tunnel traffic through HTTP/3 or HTTP/2, but common Python libraries only support HTTP/1.1. The tunneled traffic can use any protocol on top of TCP or UDP, including all HTTP versions, so MASQUE can be proxied through MASQUE for onion routing.\"),mdx(\"p\",null,\"In this talk, I will show that the MASQUE proxy design is simple and yet client implementations are complex. To put everything into context, I will recap how HTTP proxies operate and how HTTP versions differ. I will highlight lessons learned from designing a low-level HTTP client using Python asyncio.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"descriptionSource":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var s=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,p=(o,t)=>{for(var n in t||(t={}))r.call(t,n)&&s(o,n,t[n]);if(u)for(var n of u(t))a.call(t,n)&&s(o,n,t[n]);return o},y=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var e in o)r.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&u)for(var e of u(o))t.indexOf(e)<0&&a.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=D(e,[\"components\"]);return mdx(MDXLayout,y(p(p({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"sessionsAfter":[{"code":"3HCYQ9","title":"Managing complex data science experiment configurations with Hydra","speakers":[{"code":"RMHTBJ","name":"Michal Karzynski","biography":"Michal Karzynski currently works as a software architect and data scientist for Intel, specializing in applying neural network models to the domain of sound processing.\r\nHe is a chairman of the Operators Special Interest Group, part of the Open Neural Network Exchange (ONNX) standardization committee. He also runs the consulting company Atarnia.com and writes a blog, which can be found at http://michal.karzynski.pl","avatar":"https://program.europython.eu/media/avatars/michal.karzynski_8sqgZB4.jpg","slug":"michal-karzynski","affiliation":"Intel","homepage":"https://michal.karzynski.pl/","twitter":null}],"submission_type":"Talk","slug":"managing-complex-data-science-experiment-configurations-with-hydra","track":"PyData: Software Packages & Jupyter","state":"confirmed","abstract":"Data science experiments have a lot of moving parts. Datasets, models, hyperparameters all have multiple knobs and dials. This means that keeping track of the exact parameter values can be tedious or error prone.\r\n\r\nThankfully you're not the only ones facing this problem and solutions are becoming available. One of them is Hydra from Meta AI Research. Hydra is an open-source application framework, which helps you handle complex configurations in an easy and elegant way. Experiments written with Hydra are traceable and reproducible with minimal boilerplate code.\r\n\r\nIn my talk I will go over the main features of Hydra and the OmegaConf configuration system it is based on. I will show examples of elegant code written with Hydra and talk about ways to integrate it with other open-source tools such as MLFlow.","abstract_as_a_tweet":"In my talk I will go over the main features of Hydra, an open-source application framework, which helps you handle complex configurations in an easy and elegant way","description":"","duration":"30","python_level":"some","domain_level":"some","delivery":"in-person","room":"Liffey Hall 1","start":"2022-07-14T15:30:00+01:00","end":"2022-07-14T16:00:00+01:00","talks_in_parallel":["7FNTEJ","JWUZ7E","LCNBCC","NF9HFT","WFJ7XP"],"talks_after":["9VWGLC","BNJPUH","JJQSXA","NL8HRY","QMZDVX","ZSCTME"],"next_talk_code":"9VWGLC","prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/managing-complex-data-science-experiment-configurations-with-hydra"},{"code":"7FNTEJ","title":"Memory Problems, Did Collector Forgot to Clean the Garbage?","speakers":[{"code":"3HJ87E","name":"Pratibha Jagnere","biography":"Pratibha is an enthusiast Pythoniasta, passionate for coding and books. Through her PyCon talks, she love to explore and share new things she learn in Python.","avatar":"https://program.europython.eu/media/avatars/profile_image_vgEgAJs.png","slug":"pratibha-jagnere","affiliation":"Google Cloud","homepage":null,"twitter":null}],"submission_type":"Talk","slug":"memory-problems-did-collector-forgot-to-clean-the-garbage","track":"(c)Python Internals","state":"confirmed","abstract":"Memory Problems are the worst nightmare of every developer whose code is serving large files in a production environment. If you ever faced issues of memory leaking in application or if frequent unexpected Out of Memory Exception is raising your anxiety levels, then this talk is for you. This talk aims to summarize the common Memory issues in Python. It is overwhelming to see them even when logic in code is properly optimized. However it is more scary that some of these errors are hard to find and harder to fix.","abstract_as_a_tweet":"This talk aims to summarize the common Memory issues in Python. It is overwhelming to see them even when logic in code is properly optimized. However it is more scary that some of these errors are hard to find and harder to fix.","description":"In recent years, we have seen many improvements in Python Garbage Collection but there are some instances when it doesn’t work as expected. This results in memory crunch for the application leading it to crash. Although there are multiple ways to overcome the memory challenges, sometimes it is difficult to find what we can improve in our code and infrastructure that can make them memory efficient. In such cases, it helps to have an understanding of what is going on behind the curtains at a low level where memory is being managed.\r\n\r\nThis presentation aims to give a quick overview of\r\n\r\n1. How CPython manages the Memory allocation\r\n2. Common memory errors we see in day to day production code and how we can improve them\r\n\r\nWe will share what we have learned so far and encourage you to try it with your own projects. We'll walk through a simple example, with screenshots and code wherever required.","duration":"30","python_level":"some","domain_level":"some","delivery":"remote","room":"Liffey B","start":"2022-07-14T15:30:00+01:00","end":"2022-07-14T16:00:00+01:00","talks_in_parallel":["3HCYQ9","JWUZ7E","LCNBCC","NF9HFT","WFJ7XP"],"talks_after":["9VWGLC","BNJPUH","JJQSXA","NL8HRY","QMZDVX","ZSCTME"],"next_talk_code":"ZSCTME","prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/memory-problems-did-collector-forgot-to-clean-the-garbage"},{"code":"JWUZ7E","title":"Common Python Mistakes with Kubernetes, How They Can Cause Vulnerabilities and How to Solve Them!","speakers":[{"code":"B897VT","name":"Flo Pachinger","biography":"Flo is a Developer Advocate at Cisco focusing on IoT, machine learning and network programmability. With a software and networking background he has been working since a couple of years on many IoT, ML and network automation projects. He is the most passionate about connecting things and getting information out of data in any way possible. In his current role, he is working on awesome showcases with Cisco and Open-Source technologies and providing learning content to the developer community.","avatar":"https://program.europython.eu/media/avatars/me-new_On0NZxn.jpg","slug":"flo-pachinger","affiliation":"Cisco","homepage":"https://www.cisco.com/","twitter":"@flopachinger"}],"submission_type":"Talk","slug":"common-python-mistakes-with-kubernetes-how-they-can-cause-vulnerabilities-and-how-to-solve-them","track":"~None of the above","state":"confirmed","abstract":"In this session, we will have a look at common mistakes in Python, that can cause serious code vulnerabilities, specifically for Kubernetes deployments of the code. We will subsequently have a look at what those vulnerabilities actually can result in and how your containerized application can get “hacked” as a result. We will also discuss how developer and security teams struggle to talk in a common language to prevent and mitigate these vulnerabilities. Lastly, we will see how you can prevent and mitigate these vulnerabilities in real-life.","abstract_as_a_tweet":"Want to avoid serious code vulnerabilities when using Python in Kubernetes? This talk has you covered.","description":"In this session, we will have a look at common mistakes in Python, that can cause serious code vulnerabilities, specifically for Kubernetes deployments of the code. We will subsequently have a look at what those vulnerabilities actually can result in and how your containerized application can get \"compromised\" as a result. We will also discuss how developer and security teams struggle to talk in a common language to prevent and mitigate these vulnerabilities. Lastly, we will see how you can prevent and mitigate these vulnerabilities in real-life using tools like Falco, TUF, Open Policy Agent and Bandit. We will also see how a CI/CD pipeline should look like, to build, test and deploy something in real-life. During this session you will learn a ton, see cool demos and all of the samples will be available to the attendees afterwards.\r\n\r\nMy session will benefit the ecosystem by pointing out common mistakes that can be made when writing Python code and deploying this via Kubernetes. This can cause serious breaches when exploited by attackers. The goal of the session is to both educate attendees on these vulnerabilities, as well as on how to fix them.\r\nI will be talking about multiple open source projects that can secure code and deployment. I will not cover any commercial products.\r\nFalco\r\nTUF\r\nOpen Policy Agent\r\nBandit (not CNCF)\r\nGitLab (not CNCF)","duration":"30","python_level":"some","domain_level":"some","delivery":"remote","room":"Liffey Hall 2","start":"2022-07-14T15:30:00+01:00","end":"2022-07-14T16:00:00+01:00","talks_in_parallel":["3HCYQ9","7FNTEJ","LCNBCC","NF9HFT","WFJ7XP"],"talks_after":["9VWGLC","BNJPUH","JJQSXA","NL8HRY","QMZDVX","ZSCTME"],"next_talk_code":"QMZDVX","prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/common-python-mistakes-with-kubernetes-how-they-can-cause-vulnerabilities-and-how-to-solve-them"},{"code":"LCNBCC","title":"Debugging asynchronous programs in Python","speakers":[{"code":"E9QEAS","name":"Andrii Soldatenko","biography":"Hi there! I’m Pythonista from Ukraine, I'm working remotely as a Senior Software Engineer at Astronomer. Also I'm a speaker at many PyCons and meetups around the globe. In my free time I’m crossFit and gymnastic amateur.","avatar":"https://www.gravatar.com/avatar/ef0c06e2a6d8c2da5dd07ebbdf20f451","slug":"andrii-soldatenko","affiliation":"Astronomer","homepage":null,"twitter":"a_soldatenko"}],"submission_type":"Talk","slug":"debugging-asynchronous-programs-in-python","track":"Software Engineering & Architecture","state":"confirmed","abstract":"Recently the interest in asynchronous programming has grown dramatically.\r\n Unfortunately, asynchronous programs do not always have reproducible behavior. Even when they are run with the same inputs, their results can be radically different.\r\n\tIn this talk I'll show you different approaches on how to debug asynchronous programs in Python.","abstract_as_a_tweet":"In this talk I'll show you different approaches on how to debug asynchronous programs in Python.","description":"Luckily, when it comes to debugging asynchronous applications in python, we have a couple of options to consider. The writers of the asyncio module have very kindly provided a debug mode, which is quite powerful and can really aid us in our debugging adventures without the overhead of modifying the system's code base too dramatically. In particular I'll show you what asyncio debug mode means for developers, and how to source tracebacks for unhandled exceptions in futures. Also how to detect accidental blocking for I/O. We discuss how to monitor the asyncio event loop and collect metrics in statsD.\r\nFinally we discuss monitor and cli capabilities for asyncio applications based on aiomonitor and aioconsole. Also we discuss how asynchronous python works in REPL via autoawait based on ipython and how to do it in vanilla python REPL.","duration":"30","python_level":"expert","domain_level":"some","delivery":"in-person","room":"Liffey A","start":"2022-07-14T15:30:00+01:00","end":"2022-07-14T16:00:00+01:00","talks_in_parallel":["3HCYQ9","7FNTEJ","JWUZ7E","NF9HFT","WFJ7XP"],"talks_after":["9VWGLC","BNJPUH","JJQSXA","NL8HRY","QMZDVX","ZSCTME"],"next_talk_code":"NL8HRY","prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/debugging-asynchronous-programs-in-python"},{"code":"NF9HFT","title":"Scalpel: The Python Static Analysis Framework","speakers":[{"code":"RBJNZT","name":"Jiawei Wang","biography":"Jiawei Wang is a Ph.D. student at Monash University and a member of [SMart software Analysis and Trustworthy computing Lab](https://smat-lab.github.io/). He works on static analysis for Python Programs and has published four top conference papers in the domain of software engineering research with a focus on Python code quality issues among open source projects.   \r\n\r\nCurrently, he works on the Scalpel project, aiming to provide fundamental tools to address problems in the Python eco-system such as dependency issues, bug detection for machine learning applications.","avatar":null,"slug":"jiawei-wang","affiliation":"Monash University","homepage":"https://scholar.google.com.au/citations?user=jxAaupQAAAAJ","twitter":"https://twitter.com/JiaweiW02966288"},{"code":"ARKDPR","name":"Li Li","biography":null,"avatar":null,"slug":"li-li","affiliation":null,"homepage":null,"twitter":null}],"submission_type":"Talk","slug":"scalpel-the-python-static-analysis-framework","track":"Software Engineering & Architecture","state":"confirmed","abstract":"As the most popular programming language nowadays, it has been pointed out that Python static code analysis has not yet received enough attention from the research and OSS community.  For instance, to the best of our knowledge, there is no general static analysis framework proposed to facilitate the implementation of dedicated Python static analyzers (e.g., compared to the Java Soot/WALA framework). \r\n\r\nEasy to use and fast to prototyping, what makes Python stand out is bringing challenges to static analysis tasks. To fill this gap, we design and implement [Scalpel](https://github.com/SMAT-Lab/Scalpel) (A Python Static Analysis Framework) and make it publicly available as an open-source project. The Scalpel framework has already integrated a number of fundamental static analysis functions (e.g., call graph constructions, control-flow graph constructions, alias analysis, etc.) that are ready to be reused by developers to implement client applications focusing on statically resolving dedicated Python problems such as detecting bugs or fixing vulnerabilities. In addition, documentation and the user guide are provided for users. \r\n\r\nThe objective of the Scalpel framework is to (1) improve Python software quality and (2) support addressing  research challenges (e.g. API studies) in software engineering research;","abstract_as_a_tweet":"As the star of programming languages, let’s use “Scapel” to make it healthier.","description":"Scalpel is a Python Static Analysis Framework. It provides essential program analysis functions for facilitating the implementation of client applications focusing on statically resolving dedicated problems.\r\n\r\nWe aim to provide Scalpel as a generic Python static analysis framework that includes as many functions as possible (e.g., to easily build inter-function control-flow graph, to interpret the import relationship of different Python modules, etc.) towards facilitating developers to implement their dedicated problem-focused static analyzers. \r\n\r\nScalpel’s Github page has received around 100 stars from researchers and practitioners around the world in only three-month after being made public.","duration":"30","python_level":"some","domain_level":"none","delivery":"in-person","room":"The Auditorium","start":"2022-07-14T15:30:00+01:00","end":"2022-07-14T16:00:00+01:00","talks_in_parallel":["3HCYQ9","7FNTEJ","JWUZ7E","LCNBCC","WFJ7XP"],"talks_after":["9VWGLC","BNJPUH","JJQSXA","NL8HRY","QMZDVX","ZSCTME"],"next_talk_code":"BNJPUH","prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/scalpel-the-python-static-analysis-framework"},{"code":"WFJ7XP","title":"Robyn: An async Python web framework with a Rust runtime","speakers":[{"code":"ZPQUMD","name":"Sanskar Jethi","biography":"Sanskar is a Software Engineer at Bloomberg, London during the day and a FOSS maintainer during the night. He is the author and maintainer of Robyn, which is one of the faster web frameworks in the Python ecosystem.\r\n\r\nSanskar loves attending, speaking and organising conferences and has been an active part of various Open Source and Python conferences.","avatar":"https://www.gravatar.com/avatar/50fa521c70e497435ccce40ab0feb1cb","slug":"sanskar-jethi","affiliation":"Bloomberg, London","homepage":null,"twitter":"@sansyrox"}],"submission_type":"Talk","slug":"robyn-an-async-python-web-framework-with-a-rust-runtime","track":"Web","state":"confirmed","abstract":"Python web frameworks, like FastAPI, Flask, Quartz, Tornado, and Twisted, are important for writing high-performance web applications and for their contributions to the web ecosystem. However, even they posit some bottlenecks either due to their synchronous nature or due to the usage of python runtime. Most of them don’t have the ability to speed themselves due to their dependence on *SGIs. This is where Robyn comes in. Robyn tries to achieve near-native Rust throughput along with the benefit of writing code in Python. In this talk, we will learn more about Robyn. From what is Robyn to the development in Robyn.","abstract_as_a_tweet":"Robyn: A Python Web Framework with a runtime written in Rust","description":"With the effort put in at every Python version to increase the runtime performance, we know that throughput efficiency is one of the top priority items in the Python ecosystem.\r\n\r\nInspired by the extensibility and ease of use of the Python Web ecosystem and the increased focus on performance, Robyn was born. \r\n\r\nRobyn is one of the fastest, if not the fastest Python web framework in the current Python web ecosystem. With a runtime written in Rust, Robyn tries to achieve near-native rust performance while still having the ease of writing Python code. \r\n\r\nThis talk will demonstrate the reasons why Robyn was created, the technical decisions behind Robyn, the increased performance by using the rust runtime, how to use Robyn to develop web apps, and most importantly, how the community is helping Robyn grow!\r\nFinally, I will be sharing the future plans of Robyn and would love to get feedback from the developers to see what they would like to see in it.","duration":"30","python_level":"expert","domain_level":"some","delivery":"in-person","room":"Wicklow Hall 1","start":"2022-07-14T15:30:00+01:00","end":"2022-07-14T16:00:00+01:00","talks_in_parallel":["3HCYQ9","7FNTEJ","JWUZ7E","LCNBCC","NF9HFT"],"talks_after":["9VWGLC","BNJPUH","JJQSXA","NL8HRY","QMZDVX","ZSCTME"],"next_talk_code":"JJQSXA","prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/robyn-an-async-python-web-framework-with-a-rust-runtime"}],"sessionsInParallel":[{"code":"8D9LD8","title":"Creating great user interfaces on Jupyter Notebooks with ipywidgets","speakers":[{"code":"TQCKYE","name":"Deborah Mesquita","biography":"I’m Déborah and I’m a data scientist who really likes to write. I have a BSc in Computer Science and I’ve been working with Data Science since 2016 when I won the Microsoft Imagine Machine Learning Award.\r\n\r\nI’m a generalist, so I can grasp new technology quickly and I can learn as much as I need to reach the goals of a project. I think this gives me an advantage in writing because it’s easier for me to “zoom out” and explain things from a broader point of view than someone who has more experience in a particular technology.","avatar":"https://program.europython.eu/media/avatars/scene01901_qomhn8m.jpeg","slug":"deborah-mesquita","affiliation":"NTT Data","homepage":"deborahmesquita.com","twitter":null}],"submission_type":"Talk","slug":"creating-great-user-interfaces-on-jupyter-notebooks-with-ipywidgets","track":"PyData: Software Packages & Jupyter","state":"confirmed","abstract":"Jupyter notebooks are great to quickly try new ideas and experiments, but the downside is that using code to change inputs and see the results can be inefficient and error-prone. ipywidget is a Python library that solves this problem by providing a user-friendly interface with iterative widgets. It's all in Python so we don't have to worry with any CSS or Javascript. In this talk we'll learn how ipywidgets can help us build tools in the context of Data Science.","abstract_as_a_tweet":"ipywidget is a library that provides a user-friendly interface with iterative input widgets. It's all in Python so we don't have to worry with any CSS or Javascript. In this talk we'll learn how ipywidgets can help us build tools in the context of Data Science","description":"A useful Jupyter notebook that takes input from the user to generate results is a great candidate to become a web application, but usually data scientists don't have the front-end skills required to build one and deploy them. Using notebooks with ipywidgets can be a great solution to build teams' internal tools because we get the user-friendly widgets and don't need to worry about the deployment since it's all in Jupyter.","duration":"30","python_level":"some","domain_level":"none","delivery":"in-person","room":"Liffey Hall 2","start":"2022-07-14T14:35:00+01:00","end":"2022-07-14T15:05:00+01:00","talks_in_parallel":["RWKPFX","SE83WQ","SHXRMJ"],"talks_after":["3HCYQ9","7FNTEJ","JWUZ7E","LCNBCC","NF9HFT","WFJ7XP"],"next_talk_code":"JWUZ7E","prev_talk_code":"HN3NNP","website_url":"https://ep2022.europython.eu/session/creating-great-user-interfaces-on-jupyter-notebooks-with-ipywidgets"},{"code":"RWKPFX","title":"Open Science: Building Models LIke We Build Open-Source Software","speakers":[{"code":"LKGJ7S","name":"Steven Kolawole","biography":"Steven Kolawole has his technical skillset cuts across Data Science and Software Engineering, with a bias for ML Research these days. His research interests focus on resource-efficient machine learning in terms of computational resources and low-resource/limited labeled data.\r\n\r\nHe is and has been heavily involved in varieties of ML subfields including ML Engineering, Software Engineering, Data Engineering, Data Science/Analytics, and Cloud Computing.\r\n\r\nSteven is also big on knowledge sharing via community mentorship and collective growth, open-source development, meetups facilitation, speakership, technical writing, research, and he gets kicks from helping tech muggles find their feet.","avatar":"https://program.europython.eu/media/avatars/08.42_1Rtwig6.jpeg","slug":"steven-kolawole","affiliation":"ML Collective","homepage":null,"twitter":"@steveddev"}],"submission_type":"Talk","slug":"open-science-building-models-like-we-build-open-source-software","track":"PyData: Ethics in AI","state":"confirmed","abstract":"The use of transfer learning has begun a golden era in applications of Machine Learning but the development of these models “democratically” is still in the dark ages compared to best practices in Software Engineering. I describe how methods of open-source software development can allow models to be built by a distributed community of researchers.","abstract_as_a_tweet":"The use of transfer learning has begun a golden era in applications of Machine Learning but the development of these models “democratically” is still in the dark ages compared to best practices in Software Engineering. I describe how methods of open-source sof","description":"Here, I elaborate on why we should develop tools that will allow us to build pre-trained models in the same way that we build open-source software. Specifically, models should be developed by a large community of stakeholders who continually update and improve them. Realizing this goal will require porting many ideas from open-source software development to building and training models, which motivates many threads of interesting research and opens up machine learning research for much larger participation.","duration":"30","python_level":"some","domain_level":"none","delivery":"remote","room":"Liffey Hall 1","start":"2022-07-14T14:35:00+01:00","end":"2022-07-14T15:05:00+01:00","talks_in_parallel":["8D9LD8","SE83WQ","SHXRMJ"],"talks_after":["3HCYQ9","7FNTEJ","JWUZ7E","LCNBCC","NF9HFT","WFJ7XP"],"next_talk_code":"3HCYQ9","prev_talk_code":"CFRUXG","website_url":"https://ep2022.europython.eu/session/open-science-building-models-like-we-build-open-source-software"},{"code":"SE83WQ","title":"Lint All the Things!","speakers":[{"code":"GLYM3N","name":"Luke Lee","biography":"I've been developing software professionally for almost 20 years. During that time, I've written device drivers for SSDs, desktop GUIs, and web applications. Now I'm working for Octopus Energy trying to save the world from Climate Change. In addition to writing software, I enjoy writing, teaching yoga, cycling, and chasing my Corgi.","avatar":"https://program.europython.eu/media/avatars/IMG_8325_45G8ZsD.jpg","slug":"luke-lee","affiliation":"Octopus Energy","homepage":"http://www.lukelee.me","twitter":"durden20"}],"submission_type":"Talk","slug":"lint-all-the-things","track":"Python Libraries","state":"confirmed","abstract":"Code that’s uniform is easier to read, write, and debug, but writing down your standards and conventions in a README that no one reads isn’t enough. The explosion of CI and linter tools allow you to no only document your standards and conventions, but make sure people actually adhere to them.","abstract_as_a_tweet":"The explosion of CI and linter tools allow you to no only document your standards and conventions, but make sure people actually adhere to them using linters!","description":"Many teams document the conventions for their projects. However, documentation gets out of date, forgotten, or sometimes ignored. Simple documentation requires team members to constantly remember all the ‘rules’ for your project. You can better enforce those rules and free up your team members to think about harder problems using linting tools like flake8, import linter, and pre-commit.\r\n\r\nThese tools provide tons of useful stuff out of the box, but you can push them so much further with customization. This allows your project to formally document conventions, but also enforce them automatically on every commit, merge, and build. This can make code reviews faster and more focused on the problems your code is meant to solve.\r\n\r\nThis talk will introduce tools like flake8, import linter, and pre-commit along with some of their built-in functionality. Then, we’ll briefly explore some ways to customize them to fit your projects’ specific needs. Some examples of custom linter rules we’ll tour are:\r\n\r\n- Code formatted automatically and uniformly\r\n- Code doesn’t import across architecture layers violating separation of concerns\r\n- Common conventions are used\r\n- Common anti-patterns are avoided\r\n- Specific layers are fully tested\r\n- Proper git commit message formatting\r\n- Merge commits don’t exist in topic/feature branches\r\n\r\nFinally, we’ll discuss ways to use those custom linter rules on every commit, merge, and build with continuous integration or git hooks.\r\n\r\nBy the end of the talk, you’ll see several real-world linter rules used on Kraken, which is a large Django-based project used to supply green energy to millions of users across the world. In addition, expect no shortage of ideas for your own projects along the way!","duration":"30","python_level":"some","domain_level":"none","delivery":"in-person","room":"Liffey B","start":"2022-07-14T14:35:00+01:00","end":"2022-07-14T15:05:00+01:00","talks_in_parallel":["8D9LD8","RWKPFX","SHXRMJ"],"talks_after":["3HCYQ9","7FNTEJ","JWUZ7E","LCNBCC","NF9HFT","WFJ7XP"],"next_talk_code":"7FNTEJ","prev_talk_code":"8JSS8X","website_url":"https://ep2022.europython.eu/session/lint-all-the-things"}]},"__N_SSG":true}