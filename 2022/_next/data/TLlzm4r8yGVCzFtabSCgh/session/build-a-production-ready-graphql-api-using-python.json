{"pageProps":{"path":"/session/build-a-production-ready-graphql-api-using-python","session":{"code":"DVDJWP","title":"Build a production ready GraphQL API using Python","speakers":[{"code":"CWD3DM","name":"Patrick Arminio","biography":"¡Hello there! I'm Patrick, a Swiss-Italian living in London.\r\n\r\nI'm currently mainly working on Strawberry 🍓, a modern Python library for GraphQL. I'm a huge fan of GraphQL and also a Python user for more than 10 years now, so I'm super excited to contribute to the GraphQL ecosystem in Python.\r\n\r\nI'm also the Chair of Python Italia, the association that organises events around Python in Italy, I'm currently working on the new website for the conference with some friends.","avatar":"https://www.gravatar.com/avatar/489cdabedd1112f98474038939668778","slug":"patrick-arminio","affiliation":"Farbun","homepage":"https://patrick.wtf","twitter":"@patrick91","biographySource":{"compiledSource":"var m=Object.defineProperty,u=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var h=(o,n,t)=>n in o?m(o,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[n]=t,a=(o,n)=>{for(var t in n||(n={}))i.call(n,t)&&h(o,t,n[t]);if(r)for(var t of r(n))s.call(n,t)&&h(o,t,n[t]);return o},y=(o,n)=>u(o,c(n));var p=(o,n)=>{var t={};for(var e in o)i.call(o,e)&&n.indexOf(e)<0&&(t[e]=o[e]);if(o!=null&&r)for(var e of r(o))n.indexOf(e)<0&&s.call(o,e)&&(t[e]=o[e]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var e=t,{components:o}=e,n=p(e,[\"components\"]);return mdx(MDXLayout,y(a(a({},layoutProps),n),{components:o,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"\\xA1Hello there! I'm Patrick, a Swiss-Italian living in London.\"),mdx(\"p\",null,\"I'm currently mainly working on Strawberry \\u{1F353}, a modern Python library for GraphQL. I'm a huge fan of GraphQL and also a Python user for more than 10 years now, so I'm super excited to contribute to the GraphQL ecosystem in Python.\"),mdx(\"p\",null,\"I'm also the Chair of Python Italia, the association that organises events around Python in Italy, I'm currently working on the new website for the conference with some friends.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}}],"submission_type":"Tutorial","slug":"build-a-production-ready-graphql-api-using-python","track":"Web","state":"confirmed","abstract":"This workshop will teach you how to create a production ready GraphQL API using Python and Strawberry. We will be using using Django as our framework of choice, but most of the concept will be applicable to other frameworks too.\r\n\r\nWe'll learn how GraphQL works under the hood, and how we can leverage type hints to create end to end type safe GraphQL queries.\r\n\r\nWe'll also learn how to authenticate users when using GraphQL and how to make sure our APIs are performant.\r\n\r\nIf we have enough time we'll take a look at doing realtime APIs using GraphQL subscriptions and how to use GraphQL with frontend frameworks such as React.","abstract_as_a_tweet":"Learn how to build a production GraphQL using @strawberry_gql in this workshop by @patrick91","description":"Note: to follow this tutorial make sure you setup your environment following the readme here: \r\n\r\nhttps://github.com/patrick91/strawberry-workshop\r\n\r\nAgenda of the worshop\r\n\r\n- Workshop introduction\r\n\t- The introduction will explain the goal of the workshop and make sure everyone is ready to start\r\n- Intro to type hints\r\n\t- Before looking at what GraphQL is, we'll do a short introduction on type hints in Python, since we'll be using the a lot during the workshop.\r\n- Introduction to GraphQL\r\n\t- Here we'll be looking at what GraphQL is, how it works and why it has been created\r\n- Our first GraphQL API\r\n\t- Here we'll get our hands dirty by creating our first GraphQL API using Strawberry. We'll also take time to see how to configure Strawberry with Django.\r\n- Let's test our API\r\n\t- I'm a big fan of TDD, so before continuing with our workshop we'll quickly see how to test our GraphQL API using pytest.\r\n- Schema design\r\n\t- In this section we'll spend time taking a look at how to design a GraphQL schema. We'll also understand the difference between queries and mutations.\r\n- Authentication\r\n\t- In this section we'll implement authentication to our GraphQL API. We'll discuss session based auth vs JWT authentication.\r\n- Performance / Monitoring / Observability\r\n\t- In this section we'll discuss how we can add observability/monitoring to our APIs and make sure we can keep our API performant over time.\r\n\t- We'll also see how we can use dataloaders to make our queries efficient. We'll also talk about other potential performance improvements (SQL optimisation, Static Queries and more)\r\n- **Bonus**\r\n\t- Integration with React\r\n\t\t- In this section we'll see how we can use GraphQL with a frontend framework like React.\r\n\t- Subscriptions\r\n\t\t- In this section we'll see what subscriptions are in GraphQL and how you can leverage them to build realtime APIs.","duration":"180","python_level":"some","domain_level":"some","delivery":"in-person","room":"Wicklow Hall 1","start":"2022-07-11T13:45:00+01:00","end":"2022-07-11T15:15:00+01:00","talks_in_parallel":["BRSSQK","CXADJQ"],"talks_after":[],"next_talk_code":null,"prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/build-a-production-ready-graphql-api-using-python","type":"Tutorial","abstractSource":{"compiledSource":"var l=Object.defineProperty,w=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var h=(e,o,t)=>o in e?l(e,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[o]=t,n=(e,o)=>{for(var t in o||(o={}))s.call(o,t)&&h(e,t,o[t]);if(r)for(var t of r(o))p.call(o,t)&&h(e,t,o[t]);return e},u=(e,o)=>w(e,c(o));var i=(e,o)=>{var t={};for(var a in e)s.call(e,a)&&o.indexOf(a)<0&&(t[a]=e[a]);if(e!=null&&r)for(var a of r(e))o.indexOf(a)<0&&p.call(e,a)&&(t[a]=e[a]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var a=t,{components:e}=a,o=i(a,[\"components\"]);return mdx(MDXLayout,u(n(n({},layoutProps),o),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"This workshop will teach you how to create a production ready GraphQL API using Python and Strawberry. We will be using using Django as our framework of choice, but most of the concept will be applicable to other frameworks too.\"),mdx(\"p\",null,\"We'll learn how GraphQL works under the hood, and how we can leverage type hints to create end to end type safe GraphQL queries.\"),mdx(\"p\",null,\"We'll also learn how to authenticate users when using GraphQL and how to make sure our APIs are performant.\"),mdx(\"p\",null,\"If we have enough time we'll take a look at doing realtime APIs using GraphQL subscriptions and how to use GraphQL with frontend frameworks such as React.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"descriptionSource":{"compiledSource":"var h=Object.defineProperty,m=Object.defineProperties;var w=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var n=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;var u=(e,t,a)=>t in e?h(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,r=(e,t)=>{for(var a in t||(t={}))n.call(t,a)&&u(e,a,t[a]);if(i)for(var a of i(t))o.call(t,a)&&u(e,a,t[a]);return e},s=(e,t)=>m(e,w(t));var p=(e,t)=>{var a={};for(var l in e)n.call(e,l)&&t.indexOf(l)<0&&(a[l]=e[l]);if(e!=null&&i)for(var l of i(e))t.indexOf(l)<0&&o.call(e,l)&&(a[l]=e[l]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var l=a,{components:e}=l,t=p(l,[\"components\"]);return mdx(MDXLayout,s(r(r({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Note: to follow this tutorial make sure you setup your environment following the readme here: \"),mdx(\"p\",null,mdx(\"a\",r({parentName:\"p\"},{href:\"https://github.com/patrick91/strawberry-workshop\"}),\"https://github.com/patrick91/strawberry-workshop\")),mdx(\"p\",null,\"Agenda of the worshop\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Workshop introduction\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"The introduction will explain the goal of the workshop and make sure everyone is ready to start\"))),mdx(\"li\",{parentName:\"ul\"},\"Intro to type hints\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"Before looking at what GraphQL is, we'll do a short introduction on type hints in Python, since we'll be using the a lot during the workshop.\"))),mdx(\"li\",{parentName:\"ul\"},\"Introduction to GraphQL\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"Here we'll be looking at what GraphQL is, how it works and why it has been created\"))),mdx(\"li\",{parentName:\"ul\"},\"Our first GraphQL API\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"Here we'll get our hands dirty by creating our first GraphQL API using Strawberry. We'll also take time to see how to configure Strawberry with Django.\"))),mdx(\"li\",{parentName:\"ul\"},\"Let's test our API\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"I'm a big fan of TDD, so before continuing with our workshop we'll quickly see how to test our GraphQL API using pytest.\"))),mdx(\"li\",{parentName:\"ul\"},\"Schema design\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"In this section we'll spend time taking a look at how to design a GraphQL schema. We'll also understand the difference between queries and mutations.\"))),mdx(\"li\",{parentName:\"ul\"},\"Authentication\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"In this section we'll implement authentication to our GraphQL API. We'll discuss session based auth vs JWT authentication.\"))),mdx(\"li\",{parentName:\"ul\"},\"Performance / Monitoring / Observability\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"In this section we'll discuss how we can add observability/monitoring to our APIs and make sure we can keep our API performant over time.\"),mdx(\"li\",{parentName:\"ul\"},\"We'll also see how we can use dataloaders to make our queries efficient. We'll also talk about other potential performance improvements (SQL optimisation, Static Queries and more)\"))),mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},\"Bonus\"),mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"Integration with React\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"In this section we'll see how we can use GraphQL with a frontend framework like React.\"))),mdx(\"li\",{parentName:\"ul\"},\"Subscriptions\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"In this section we'll see what subscriptions are in GraphQL and how you can leverage them to build realtime APIs.\")))))))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"sessionsAfter":[],"sessionsInParallel":[{"code":"BRSSQK","title":"TDD in Python with pytest","speakers":[{"code":"7BS3PU","name":"Leonardo Giordani","biography":"Born in 1977 together with Star Wars, bash, Apple ][, Dire Straits, The Silmarillion, and many other great things.\r\n\r\nI started coding in April 1987 on a Sinclair ZX Spectrum. I then moved to MS-DOS PCs and in 1996 I started using Linux and became interested in operating system internals. I love software architectures, algorithms, mathematics and cryptography.\r\n\r\nI’m mainly interested in open source software. I like both the theoretical and practical aspects of computer science.\r\n\r\nI am currently working as a contractor DevOps and Python developer while I design a DevOps bootcamp that I will run in London from October 2022.\r\n\r\nFrom 2013 I blog some technical thoughts at http://thedigitalcatonline.com.\r\n\r\nIn 2018 I published the free book “Clean Architectures in Python” http://bit.ly/getpycabook","avatar":"https://program.europython.eu/media/avatars/Avatar400x400_cuVmtE6.jpg","slug":"leonardo-giordani","affiliation":"The Digital Cat Services","homepage":"https://www.thedigitalcatonline.com/","twitter":"@tw_lgiordani"}],"submission_type":"Tutorial","slug":"tdd-in-python-with-pytest","track":"Testing","state":"confirmed","abstract":"This workshop will guide you step-by-step through the implementation of a very simple Python library following a strict TDD workflow. At the end of the workshop you will have grasped the main principles of TDD and learned the fundamentals of the Python testing library pytest.","abstract_as_a_tweet":"TDD in Python with pytest: learn how to write Python code following a test-driven development routine","description":"Test-Driven Development (TDD) is fortunately one of the names that I can spot most frequently when people talk about methodologies. Unfortunately, many programmers still do not follow it, fearing that it will impose a further burden on the already difficult life of a developer.\r\n\r\nTDD is a methodology, something that can help you to create better code. But it is not going to solve all your problems. As with all methodologies you have to pay attention not to commit blindly to it. Try to understand the reasons why certain practices are suggested by the methodology and you will also understand when and why you can or have to be flexible.\r\n\r\nDuring the workshop we will learn what TDD is, and what are the main rules. We will do this developing a very simple Python library together in a sort of a game that mirrors a daily TDD development routine. While we do this, we will also learn how to use pytest, which is one of the most used testing libraries in Python. Oh, we will also learn when NOT to follow the rules!\r\n\r\nSetup instructions:\r\n\r\n* Create and activate your Python virtual environment\r\n* `git clone https://github.com/lgiordani/simple_calculator`\r\n* `cd simple_calculator`\r\n* `git checkout --track origin/develop`\r\n* `pip install -r requirements/dev.txt`\r\n* You should be able to run `pytest -svv` and get an output like\r\n\r\n```\r\n================================ test session starts ===============================\r\nplatform linux -- Python XXXX, pytest-XXXX, py-XXXX, pluggy-XXXX --\r\ncabook/venv3/bin/python3\r\ncachedir: .cache\r\nrootdir: cabook/code/calc, inifile: pytest.ini\r\nplugins: cov-XXXX\r\ncollected 0 items \r\n\r\n=============================== no tests ran in 0.02s ==============================\r\n```","duration":"180","python_level":"none","domain_level":"none","delivery":"in-person","room":"Wicklow Hall 2B","start":"2022-07-11T13:45:00+01:00","end":"2022-07-11T15:15:00+01:00","talks_in_parallel":["CXADJQ","DVDJWP"],"talks_after":[],"next_talk_code":null,"prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/tdd-in-python-with-pytest"},{"code":"CXADJQ","title":"How To Train Your Graphics Card (To Read)","speakers":[{"code":"F3JRJQ","name":"Matthew Carrigan","biography":"Hi! I used to be a biologist, then I became a computational biologist, and then I gave up all pretense and started coding full-time. I'm currently a machine learning engineer at Hugging Face, but sometimes I try to sneak in some protein models into my job, for old time's sake.","avatar":"https://program.europython.eu/media/avatars/matt_UBJfvPM.png","slug":"matthew-carrigan","affiliation":"Hugging Face","homepage":"https://huggingface.co/","twitter":"@carrigmat"}],"submission_type":"Tutorial","slug":"how-to-train-your-graphics-card-to-read","track":"PyData: Deep Learning, NLP, CV","state":"confirmed","abstract":"This tutorial aims to introduce new users to modern NLP using the open-source HuggingFace Transformers library. We'll use massive, pre-existing language models that you might have heard of like BERT and GPT to solve real-world tasks. By the end of this tutorial you'll be able to classify documents, get your computer to read a text and answer questions about it, and even translate between languages!","abstract_as_a_tweet":"How To Train Your Graphics Card (To Read): Go from zero to solving real-world tasks with state-of-the-art machine learning for text in a single tutorial!","description":"Note: Despite the title, no graphics card is needed! We will be using Colab notebooks for most of the tutorial. You can also run the notebooks on your local machine, but if you do that you'll need to install git-lfs to download some of the models we use.\r\n\r\nMost practical machine learning these days is \"supervised learning\". In supervised learning, we show a model a collection of example inputs and outputs, and train it to give the right output for each input. For example, we might show it pictures of animals, combined with a \"label\" for each picture like \"cat\" or \"dog\", in order to train it to identify which animal is in each photo. Or we could show it samples of text from Twitter posts, and give the tweets \"labels\" like \"toxic\" or \"not toxic\", in order to train it to identify unwanted tweets and filter them out automatically. In effect, the model learns to predict the correct \"label\" for any input that it sees.\r\n\r\nThe golden rule in supervised learning is that the more data you have, the better the model you can train. More data means more accuracy, whether the task is recognizing animals in images, or classifying text, or even driving a self-driving car. This is a real problem, though, when data collection isn't free; without a huge dataset of inputs and labels, it might be hard or impossible to train a model that's accurate enough for what you want it to do.\r\n\r\nProbably the single biggest revolution in machine learning in the last 5 years, particularly in NLP (natural language processing), has been the arrival of \"foundation models\", huge models trained for very long periods on vast amounts of text data. These models offer a solution to the problem of limited training data - by bringing a huge amount of linguistic prior knowledge with them, they greatly reduce the amount of data needed to learn a new task. In 2016, training a model to classify toxic comments might have required millions (or even tens of millions!) of examples and labels in order to achieve acceptable accuracy, but in 2022, we can start with a foundation model that already \"knows\" a lot about language, and achieve the same accuracy with a tiny fraction of that, and in a much shorter time, too!\r\n\r\nFoundation models can be intimidating, though - they're often created by industrial or academic research labs and published in papers that can be very impenetrable for people without a strong research background. In this tutorial, we'll show you how to abstract away that complexity and load, train and use foundation models without needing a Ph.D, or even any prior experience in machine learning! By the end of this 3-hour session, you should have the knowledge and code samples you need to train a better machine learning model than someone at the cutting edge of the field in 2016 could have achieved even with an entire research team.\r\n\r\nIn this course, we will use HuggingFace Transformers combined with the TensorFlow machine learning library. We will also use some of the most popular data science libraries in Python like Numpy and Pandas when preparing our data. You don't have to be familiar with any of these before attending the tutorial, and I'll do my best to explain what we're doing with them as we go! I don't assume any specific background in machine learning, and we won't need any advanced mathematics. I will, however, assume that you're reasonably fluent in Python!","duration":"180","python_level":"some","domain_level":"none","delivery":"in-person","room":"Wicklow Hall 2A","start":"2022-07-11T13:45:00+01:00","end":"2022-07-11T15:15:00+01:00","talks_in_parallel":["BRSSQK","DVDJWP"],"talks_after":[],"next_talk_code":null,"prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/how-to-train-your-graphics-card-to-read"}]},"__N_SSG":true}