{"pageProps":{"path":"/session/using-python-to-manage-software-bill-of-materials","session":{"code":"VAGHFS","title":"Using Python to  manage Software Bill of Materials","speakers":[{"code":"JGAHYH","name":"Anthony Harrison","biography":"An experienced solution architect and cyber security consultant delivering and securing mission critical systems. In his spare time, teaches Python at Manchester CoderDojo and has acts as a mentor for Google Summer of Code (GSOC) projects supported by the Python Software Foundation.","avatar":null,"slug":"anthony-harrison","affiliation":"Independent","homepage":null,"twitter":null,"biographySource":{"compiledSource":"var y=Object.defineProperty,d=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var i=(t,e,o)=>e in t?y(t,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[e]=o,r=(t,e)=>{for(var o in e||(e={}))a.call(e,o)&&i(t,o,e[o]);if(s)for(var o of s(e))c.call(e,o)&&i(t,o,e[o]);return t},u=(t,e)=>d(t,m(e));var p=(t,e)=>{var o={};for(var n in t)a.call(t,n)&&e.indexOf(n)<0&&(o[n]=t[n]);if(t!=null&&s)for(var n of s(t))e.indexOf(n)<0&&c.call(t,n)&&(o[n]=t[n]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var n=o,{components:t}=n,e=p(n,[\"components\"]);return mdx(MDXLayout,u(r(r({},layoutProps),e),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"An experienced solution architect and cyber security consultant delivering and securing mission critical systems. In his spare time, teaches Python at Manchester CoderDojo and has acts as a mentor for Google Summer of Code (GSOC) projects supported by the Python Software Foundation.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}}],"submission_type":"Talk","slug":"using-python-to-manage-software-bill-of-materials","track":"DevOps","state":"confirmed","abstract":"Software has become increasingly complex as it is constructed from a multitude of software components. In many cases the identification of these components are hidden as they are included through implicit dependencies. Without fully understanding the dependencies of your product it is not possible to understand the current vulnerability status of your software product or system.\r\nIn the past 12 months, there has been an increasing focus on the use Software Bill of Materials (SBOMs) as a key artefact to be delivered with a software product; it will be mandated for all software products in some markets later in 2022. SBOMs which were initially developed to capture the inter-dependencies between components (the focus was on capturing the different types of open source licences used within a product) but with the latest evolution, tracking of vulnerabilities within a product can now be performed.\r\n\r\nThis talk will introduce the SBOM concept and show how Python and its ecosystem can be used to create, manage and use SBOMs as part of your development pipeline.","abstract_as_a_tweet":"How python is supporting the growing need for Software Bill of Materials","description":"","duration":"30","python_level":"none","domain_level":"none","delivery":"remote","room":"Wicklow Hall 1","start":"2022-07-13T16:05:00+01:00","end":"2022-07-13T16:35:00+01:00","talks_in_parallel":["39YWUH","98XE8Q","CQ7NBC","HJWZ37","HWMZZG"],"talks_after":["GN9FNF"],"next_talk_code":null,"prev_talk_code":"NZJDKC","website_url":"https://ep2022.europython.eu/session/using-python-to-manage-software-bill-of-materials","type":"Talk","abstractSource":{"compiledSource":"var p=Object.defineProperty,l=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var c=(e,t,o)=>t in e?p(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,a=(e,t)=>{for(var o in t||(t={}))i.call(t,o)&&c(e,o,t[o]);if(s)for(var o of s(t))r.call(t,o)&&c(e,o,t[o]);return e},u=(e,t)=>l(e,h(t));var d=(e,t)=>{var o={};for(var n in e)i.call(e,n)&&t.indexOf(n)<0&&(o[n]=e[n]);if(e!=null&&s)for(var n of s(e))t.indexOf(n)<0&&r.call(e,n)&&(o[n]=e[n]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var n=o,{components:e}=n,t=d(n,[\"components\"]);return mdx(MDXLayout,u(a(a({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`Software has become increasingly complex as it is constructed from a multitude of software components. In many cases the identification of these components are hidden as they are included through implicit dependencies. Without fully understanding the dependencies of your product it is not possible to understand the current vulnerability status of your software product or system.\nIn the past 12 months, there has been an increasing focus on the use Software Bill of Materials (SBOMs) as a key artefact to be delivered with a software product; it will be mandated for all software products in some markets later in 2022. SBOMs which were initially developed to capture the inter-dependencies between components (the focus was on capturing the different types of open source licences used within a product) but with the latest evolution, tracking of vulnerabilities within a product can now be performed.`),mdx(\"p\",null,\"This talk will introduce the SBOM concept and show how Python and its ecosystem can be used to create, manage and use SBOMs as part of your development pipeline.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"descriptionSource":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var s=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,p=(o,t)=>{for(var n in t||(t={}))r.call(t,n)&&s(o,n,t[n]);if(u)for(var n of u(t))a.call(t,n)&&s(o,n,t[n]);return o},y=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var e in o)r.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&u)for(var e of u(o))t.indexOf(e)<0&&a.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=D(e,[\"components\"]);return mdx(MDXLayout,y(p(p({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"sessionsAfter":[{"code":"GN9FNF","title":"Dodging AI Dystopia: you can't save the world alone","speakers":[{"code":"DRUEEZ","name":"Dr. Nakeema Stefflbauer","biography":"Dr. Nakeema Stefflbauer is a digital product executive with expertise in early-stage ideation, test, and development. Her digital transformation iexperience s paired with a focus on algorithmic explainability, equity, and fairness. Dr. Stefflbauer is the founder and CEO of FrauenLoop in Berlin and, both privately and as part of the Atomico angel programme, she advises and invests in startups building innovative, sustainable tech solutions.\r\n\r\n\r\n  Dr. Stefflbauer holds MA and PhD degrees from [Harvard University](https://gsas.harvard.edu/), a BA from [Brown University](https://www.brown.edu/), and an executive MBA from the disruptive [Quantic School of Business and Technology](https://quantic.edu/). Her accomplishments includes delivery of software in the context of eLearning, enterprise resource planning (ERP), eCommerce, fintech and insurtech in the United States, Canada, and Germany.","avatar":null,"slug":"dr-nakeema-stefflbauer","affiliation":"FrauenLoop","homepage":null,"twitter":null}],"submission_type":"Keynote","slug":"dodging-ai-dystopia-you-can-t-save-the-world-alone","track":null,"state":"confirmed","abstract":"If real life was a superhero movie, we’d have all the ingredients needed for a hero’s rescue. So many “AI” algorithms are being applied to EU education, employment, and public safety systems that you might wonder if the TV series “Black Mirror” is fiction or a blueprint for nefarious actors. Luckily, there are codes to keep dystopia at bay, whether from the fictional Justice League or from real-life courts of justice. This talk discusses both, and is aimed at software engineers, architects, designers, testers and product/project managers who want to slow the Automation of Everything, but don’t know how.","abstract_as_a_tweet":"Ever get the feeling we're living in an episode of Black Mirror? You're not alone! Dr Nakeema Stefflbauer will explore the \"Automation of Everything\" and the importance of keeping Black Mirror safely in the land of fiction.","description":"","duration":"45","python_level":"some","domain_level":"none","delivery":"in-person","room":"The Auditorium","start":"2022-07-13T16:55:00+01:00","end":"2022-07-13T17:40:00+01:00","talks_in_parallel":[],"talks_after":["CPYWPM"],"next_talk_code":"CPYWPM","prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/dodging-ai-dystopia-you-can-t-save-the-world-alone"}],"sessionsInParallel":[{"code":"39YWUH","title":"Working with Audio in Python (feat. Pedalboard)","speakers":[{"code":"XSUHP3","name":"Peter Sobot","biography":"Peter is a Staff Machine Learning Engineer at Spotify in New York, where he helps lead their Audio Intelligence Lab - an ML research lab dedicated to pushing the state of the art in audio-based machine learning. He hails from Canada (and so spells colour the _correct_ way) and when not hacking on audio software, he plays drums and bass in a handful of bands.","avatar":"https://program.europython.eu/media/avatars/2020-09-08-straightened_agoHJCQ.png","slug":"peter-sobot","affiliation":"Spotify","homepage":"https://petersobot.com","twitter":"psobot"}],"submission_type":"Talk","slug":"working-with-audio-in-python-feat-pedalboard","track":"Python Libraries","state":"confirmed","abstract":"Come _hear_ about how to play with audio in only a couple lines of Python!\r\n\r\nPython can do (nearly) anything, but using Python to work with audio has always been a complicated and messy affair. In this talk, we'll be going through how digital audio works, how Python can be used to play with audio data, and how a new library - Pedalboard - can help. Pedalboard is a simple, fast, and performant library for doing common audio tasks in Python, including applying effects, using VSTs and audio plugins, and encoding/decoding various audio formats.","abstract_as_a_tweet":"Ever wanted to play with audio in Python? Come check out Pedalboard, a library that brings the power of a digital audio workstation into your Python code.","description":"Digital audio has been around for 40 years, but working with audio data can still be complicated, especially in Python. In this talk, we'll talk about how digital audio works from the ground up (from sounds, to bytes, to files), how you can use Python to do a bunch of really neat things with audio, and how a new Python library - Pedalboard - helps make working with audio much easier.\r\n\r\nEver used a digital audio workstation (DAW) like GarageBand, Ableton Live, Logic, or Pro Tools? Today's musicians use DAWs as instruments in themselves. But what if you want to combine the power of a DAW with the flexibility of writing your own code?\r\n\r\nPedalboard was built to fill this niche: to pull the power of a DAW into your Python code. Pedalboard makes it easy to build and apply audio effects, read and write audio files, and load audio plug-ins (\"VSTs\") without any complicated dependencies or frameworks. Just `import pedalboard` and go!","duration":"30","python_level":"some","domain_level":"none","delivery":"in-person","room":"Liffey B","start":"2022-07-13T16:05:00+01:00","end":"2022-07-13T16:35:00+01:00","talks_in_parallel":["98XE8Q","CQ7NBC","HJWZ37","HWMZZG","VAGHFS"],"talks_after":["GN9FNF"],"next_talk_code":null,"prev_talk_code":"E73V8G","website_url":"https://ep2022.europython.eu/session/working-with-audio-in-python-feat-pedalboard"},{"code":"98XE8Q","title":"When to refactor your code into generators and how","speakers":[{"code":"MDZNRX","name":"Jan-Hein Bührman","biography":"Jan-Hein is a software engineer who witnessed Python’s first baby steps up very close, and loves programming in Python since then. While he worked in different software development roles, he always kept an eye on its development. After he has founded a dedicated Python software unit within Ordina, the company he works for, he’s now back at the work that leaves him with a positive energy balance at the end of the day: programming in Python!","avatar":"https://program.europython.eu/media/avatars/Jan-Hein_helderder_aClbtTP.jpg","slug":"jan-hein-buhrman","affiliation":"Ordina Pythoneers","homepage":"https://www.ordina.nl/vakgebieden/python/","twitter":"@janheinb"}],"submission_type":"Talk","slug":"when-to-refactor-your-code-into-generators-and-how","track":"Software Engineering & Architecture","state":"confirmed","abstract":"Have you ever found yourself coding variations of a loop construct where fragments of the loop code were exactly the same between the variations? Or, in an attempt to factor out these common parts, you ended up with a loop construct containing a lot of conditional code for varying start, stop, or selection criteria?\r\n\r\nYou might have felt that the end result just didn't look right. Because of the duplicated parts in your code, you noticed that the code didn't conform to the DRY (_Don't Repeat Yourself_) principle. Or, after an attempt to combine the variations into a single loop, with consequently a lot of conditional code, your inner voice told you that the resulting code had become too complex and difficult to maintain.\r\n\r\nThis talk will show you a way out of this situation. It demonstrates how you can create a **generator function** that implements only the common parts of your loop construct. Subsequently you will learn how you can combine this generator function with distinct hand-crafted functions or building blocks from the standard library `itertools` module or the `more-itertools` package.\r\n\r\nAs an example, imagine you'd need to implement some varying functionality based on the Fibonacci sequence. This talk shows you how it would look like before and after you've refactored it into a **pipeline of generators**.\r\n\r\nAfter having seen this pattern, you will recognize more quickly when this kind of refactoring helps you to create more maintainable and more Pythonic code.","abstract_as_a_tweet":"Have you ever found yourself coding variations of a loop construct without knowing how to cleanly factor out the common parts? This talk will show you a way out: refactor into generator functions!","description":"","duration":"30","python_level":"some","domain_level":"some","delivery":"in-person","room":"Liffey A","start":"2022-07-13T16:05:00+01:00","end":"2022-07-13T16:35:00+01:00","talks_in_parallel":["39YWUH","CQ7NBC","HJWZ37","HWMZZG","VAGHFS"],"talks_after":["GN9FNF"],"next_talk_code":null,"prev_talk_code":"TF9Z8Q","website_url":"https://ep2022.europython.eu/session/when-to-refactor-your-code-into-generators-and-how"},{"code":"CQ7NBC","title":"Building a Just-in-Time Python FaaS Platform with Unikraft","speakers":[{"code":"GXDRHH","name":"Felipe Huici","biography":"Dr. Felipe Huici is CEO and Co-Founder at Unikraft UG, a start-up dedicated to lightweight and open source virtualization technologies and significantly lowering cloud infrastructure bills. In addition, Felipe is a chief researcher at NEC Laboratories Europe in Heidelberg, Germany where his main research and interests lie in the areas of high-performance software systems, and in particular specialization, virtualization and security. He has been published in several top-tier conferences and journals such as SOSP, ASPLOS, OSDI, Eurosys, SIGCOMM, NSDI, CoNEXT, and SIGCOMM CCR. Finally, Felipe is one of the founders and maintainers of the Linux Foundation Unikraft open source project.","avatar":"https://program.europython.eu/media/avatars/felipehuici_ixalJ4j.jpeg","slug":"felipe-huici","affiliation":"Unikraft UG and NEC Laboratories Europe GmbH","homepage":"https://unikraft.io/","twitter":null},{"code":"RRE9DV","name":"Alexander Jung","biography":"Alexander Jung is a Co-Founder and Chief Product Officer at the Lightweight Virtualization company Unikraft, focusing on leading unikernels into market and mass deployment.  He is also a PhD student at Lancaster University, where he focuses primarily on optimizations of unikernels for network-bound operations; delivering effective continuous integration and deployment of VNF-based services; as well as compile-time methods for inter-VM communication based on library Operating Systems.  Previously he has worked as the Chief Information Officer at UK-based startup Adjacent Systems, securing and delivering systems for local law-enforcement and government.","avatar":"https://program.europython.eu/media/avatars/Photo-on-12.08.21-at-15.36_shop_copy_a4H0crA.jpg","slug":"alexander-jung","affiliation":"Unikraft","homepage":null,"twitter":"@nderjung"}],"submission_type":"Talk","slug":"building-a-just-in-time-python-faas-platform-with-unikraft","track":"Infrastructure: Cloud & Hardware","state":"confirmed","abstract":"Function-as-a-Service (FaaS) platforms are one of the key service offerings for any cloud provider. To provide strong isolation, the functions are run inside heavy-weight virtual machines (and within containers inside those for orchestration reasons). Consequently, such instances take too long to boot and so are kept on all the time, even though the functions only receive requests intermittently. The end result is that current FaaS platforms are much less efficient than they could be.\r\n\r\nWe will introduce a radically novel way to build FaaS platforms based on Python and the Unikraft Linux Foundation open source project (www.unikraft.org). Unikraft is a toolkit for building fully specialized, cloud-ready virtual machines called unikernels targeting a single application . Using Unikraft we can construct extremely specialized, Python-based unikernels that use only a few MBs to run a boot in 10s of milliseconds, allowing us to bring VMs up as a request to a function comes in, and to shut it down (or suspend it) afterwards. The result: a Python-based FaaS platform that is significantly more efficient and cheaper to operate than existing offerings.\r\n\r\nIn the talk we will provide an introduction to Unikraft, how Python is built on top of it, a full description of the FaaS platform and a short demo.","abstract_as_a_tweet":"Building an Extremely Efficient, Just-in-Time, Python FaaS Platform with Unikraft","description":"Unikraft [1] is a unikernel (specialized virtual machine) project. Unikraft is able to target a specific application (e.g., a web server such as NGINX) and transparently build an entire software stack, from the operating system all the way up to systems libraries, that includes only the parts that the application needs and nothing more. Such specialization results in extremely short boot times (a few milliseconds compared to hundreds or thousands for Linux VMs), small image sizes and memory consumption (e.g., a few MBs vs. hundreds of MBs) and a minimal attack surface, to name a few benefits. The short boot times also allow us to bring Unikraft VMs up just-in-time, as a request for a service arrives, and to bring the instance back down (or suspend it) when the request is over, allowing for even greater efficiency.\r\n\r\nIn addition, Unikraft images are single address space: in cloud environments strong isolation is provided by the hypervisor, so for single application/single tenant VMs it does not make sense to have a kernel/user-space divide. The end result is higher efficiency in performance, with Unikraft yielding noticeably higher throughout than Linux [2].\r\n\r\nRegarding application support, we have put great effort towards making Unikraft as POSIX compatible as possible. Unikraft provides a syscall shim-layer and support for the musl libc, allowing us to run unmodified versions of Python. \r\n\r\nIn terms of orchestration, we have integrated Unikraft with major frameworks such as Kubernetes and Prometheus. This, along with extensive debugging facilities should make Unikraft easy to both use and develop for.\r\n\r\n[1] https://unikraft.org/\r\n[2] https://dl.acm.org/doi/10.1145/3447786.3456248 (best paper award)","duration":"30","python_level":"some","domain_level":"none","delivery":"in-person","room":"Liffey Hall 1","start":"2022-07-13T16:05:00+01:00","end":"2022-07-13T16:35:00+01:00","talks_in_parallel":["39YWUH","98XE8Q","HJWZ37","HWMZZG","VAGHFS"],"talks_after":["GN9FNF"],"next_talk_code":null,"prev_talk_code":"VFEVKR","website_url":"https://ep2022.europython.eu/session/building-a-just-in-time-python-faas-platform-with-unikraft"},{"code":"HJWZ37","title":"How much time does it take to write tests? A case study","speakers":[{"code":"QRKRQL","name":"Antonis Christofides","biography":"I've been writing software for more than 30 years. I’ve written software to streamline the management of hydro/meteorological measurements; to make time series visualization and processing easy; to provide irrigation advice; and much more. I have been working with automatic meteorological stations since 1992; I’ve occasionally written programs to interface directly with meteorological loggers; I’ve dug out dusty old handwritten weather observations and keyed them in myself; I have created various web sites and web-accessible databases; I’ve administrated servers, including email and network, and high-availability databases with automatic failover. I have written the book on Django deployment (https://djangodeployment.com).\r\n\r\nIn research, I’ve worked on water-related decision making when there are conflicting objectives; on evaluation of climate models; on causation and determinism in hydrology and the climate; and more. My opinion on climate change is that there is no evidence that it is man-made.\r\n\r\nI help scientists and engineers create software. In particular, I help them bring their models to the web.","avatar":"https://www.gravatar.com/avatar/39d2ea0a36d1740e5f544076955a4b30","slug":"antonis-christofides","affiliation":"IRMASYS P.C.","homepage":"https://antonischristofides.com","twitter":"@a_christofides"}],"submission_type":"Talk","slug":"how-much-time-does-it-take-to-write-tests-a-case-study","track":"Testing","state":"confirmed","abstract":"Writing automated tests takes time. As developers, we are constantly pressed by management to deliver early, which means we are tempted to skip writing some of the tests. Of course, in the long term, the time needed to write tests is paid off.\r\n\r\nBut how much of our time do we spend in order to write tests? Is it half? Is it three-quarters? This can be difficult to measure, particularly if we are using test-driven development, because in that case writing tests is integrated in the process of writing code.\r\n\r\nWhile I like test-driven development, I can only practice it when I have a good idea of what code I want to write. But sometimes my idea of how to approach the problem at hand is quite vague and I experiment a lot. In these cases, I write the code first and the tests after that. \r\n\r\nIn one such case I first finished the functionality I was developing and proclaimed it \"beta\". I then went on to write the unit tests for it. As a result, I have a clear idea how much time I spent writing documentation and main code, and how much I spent writing tests. In this talk I examine the implications of all this.","abstract_as_a_tweet":"I measured the time spent on writing tests vs. the time I spent on everything else for a part of an ongoing project. Here are the results and the implications.","description":"","duration":"30","python_level":"some","domain_level":"some","delivery":"in-person","room":"Liffey Hall 2","start":"2022-07-13T16:05:00+01:00","end":"2022-07-13T16:35:00+01:00","talks_in_parallel":["39YWUH","98XE8Q","CQ7NBC","HWMZZG","VAGHFS"],"talks_after":["GN9FNF"],"next_talk_code":null,"prev_talk_code":"ZK7MVG","website_url":"https://ep2022.europython.eu/session/how-much-time-does-it-take-to-write-tests-a-case-study"},{"code":"HWMZZG","title":"Music and Code","speakers":[{"code":"WADEN9","name":"Nicholas H.Tollervey","biography":"A recovering former member of the Python community.\r\n\r\nMusic, philosophy, teaching, writing & computing. Just like this bio: concise, honest and full of useful information. Everything I say is false...","avatar":"https://www.gravatar.com/avatar/e8d4e155929363bd22a7852494d18c25","slug":"nicholas-h-tollervey","affiliation":"Freelancer","homepage":"https://ntoll.org/","twitter":null}],"submission_type":"Talk","slug":"music-and-code","track":"Education, Teaching & Further Training","state":"confirmed","abstract":"A playful exploration of the similarities and differences between music and code. What could coders learn from musicians, especially when it comes to learning, training and mentoring? (A personal perspective from someone who has been a professional musician, a professional teacher, and a professional coder.)","abstract_as_a_tweet":"Music and Code - a playful performance pondering programming.","description":"Learning to code requires a long term investment of time and effort to acquire a set of skills, theory, knowledge and experience in order to effectively make software. Learning to play an instrument requires a long term investment of time and effort to acquire a set of skills, theory, knowledge and experience in order to effectively make music.\r\n\r\nI will compare and contrast certain aspects of the worlds of code and music and will explore questions such as: what would music lessons look like if we taught music like we teach coding (and vice versa)? Who are the virtuoso coders we should celebrate as role models? (And why?) How do musicians and coders sustain AND develop their cultures across generations? Is coding an art? Is music a science? What could folks do to cultivate their practice of music and code? How can we tell if someone is an \"expert\", and should we trust their advice?\r\n\r\nMost of all, it'll be practical, fun and thoughtful.\r\n\r\nI hope to make a space for some interesting and stimulating ideas. Then we can all explore them together in the corridor track.","duration":"45","python_level":"some","domain_level":"none","delivery":"in-person","room":"The Auditorium","start":"2022-07-13T16:05:00+01:00","end":"2022-07-13T16:50:00+01:00","talks_in_parallel":["39YWUH","98XE8Q","CQ7NBC","HJWZ37","VAGHFS"],"talks_after":["GN9FNF"],"next_talk_code":"GN9FNF","prev_talk_code":"ZV9Y8M","website_url":"https://ep2022.europython.eu/session/music-and-code"}]},"__N_SSG":true}