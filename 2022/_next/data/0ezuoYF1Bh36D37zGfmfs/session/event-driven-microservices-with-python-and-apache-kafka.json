{"pageProps":{"path":"/session/event-driven-microservices-with-python-and-apache-kafka","session":{"code":"P3EYQE","title":"Event-driven microservices with Python and Apache Kafka","speakers":[{"code":"FHJBQF","name":"Dave Klein","biography":"After 28 years as a developer, architect, project manager (recovered), author, trainer, conference organizer, and homeschooling dad, Dave Klein landed his dream job as a developer advocate at Confluent. Dave is marveling in and eager to help others explore the amazing world of event streaming with Apache Kafka.","avatar":"https://program.europython.eu/media/avatars/daveklein_ogDny9Q.jpg","slug":"dave-klein","affiliation":"Confluent","homepage":"developer.confluent.io","twitter":"@daveklein","biographySource":{"compiledSource":"var l=Object.defineProperty,h=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var c=(e,a,o)=>a in e?l(e,a,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[a]=o,t=(e,a)=>{for(var o in a||(a={}))i.call(a,o)&&c(e,o,a[o]);if(r)for(var o of r(a))p.call(a,o)&&c(e,o,a[o]);return e},d=(e,a)=>h(e,m(a));var s=(e,a)=>{var o={};for(var n in e)i.call(e,n)&&a.indexOf(n)<0&&(o[n]=e[n]);if(e!=null&&r)for(var n of r(e))a.indexOf(n)<0&&p.call(e,n)&&(o[n]=e[n]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var n=o,{components:e}=n,a=s(n,[\"components\"]);return mdx(MDXLayout,d(t(t({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"After 28 years as a developer, architect, project manager (recovered), author, trainer, conference organizer, and homeschooling dad, Dave Klein landed his dream job as a developer advocate at Confluent. Dave is marveling in and eager to help others explore the amazing world of event streaming with Apache Kafka.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}}],"submission_type":"Talk","slug":"event-driven-microservices-with-python-and-apache-kafka","track":"Software Engineering & Architecture","state":"confirmed","abstract":"Implementing complex systems with microservices can be a great decision, but if we’re not careful we can end up with a distributed monolith. Let’s see how to avoid that by building lightweight, loosely coupled microservices using Python, Flask, and Apache Kafka.","abstract_as_a_tweet":"Come and learn how Python and Apache Kafka give us the tools we need to build scalable and extensible microservices!","description":"Building distributed systems can be challenging, and that's what microservices are. With traditional request/response based architectures, it is easy to end up with services that are tightly coupled, making them difficult to maintain and extend independently. While not a silver bullet, an event-based architecture makes it easier to maintain loose coupling. It also makes it easier to extend and evolve our systems without resorting to a rewrite. \r\n\r\nIn this presentation, we will look at an example of an event-driven microservices application and discuss some things to consider when adopting this approach.","duration":"30","python_level":"some","domain_level":"none","delivery":"in-person","room":"Wicklow Hall 1","start":"2022-07-13T14:35:00+01:00","end":"2022-07-13T15:05:00+01:00","talks_in_parallel":["7DJJMK","AKJCWL","BL9NGV","DZZ8X9"],"talks_after":["E73V8G","NZJDKC","TF9Z8Q","VFEVKR","ZK7MVG","ZV9Y8M"],"next_talk_code":"NZJDKC","prev_talk_code":"DSCHNK","website_url":"https://ep2022.europython.eu/session/event-driven-microservices-with-python-and-apache-kafka","type":"Talk","abstractSource":{"compiledSource":"var l=Object.defineProperty,m=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var a=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var r=(e,t,o)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,s=(e,t)=>{for(var o in t||(t={}))a.call(t,o)&&r(e,o,t[o]);if(i)for(var o of i(t))c.call(t,o)&&r(e,o,t[o]);return e},u=(e,t)=>m(e,d(t));var p=(e,t)=>{var o={};for(var n in e)a.call(e,n)&&t.indexOf(n)<0&&(o[n]=e[n]);if(e!=null&&i)for(var n of i(e))t.indexOf(n)<0&&c.call(e,n)&&(o[n]=e[n]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var n=o,{components:e}=n,t=p(n,[\"components\"]);return mdx(MDXLayout,u(s(s({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Implementing complex systems with microservices can be a great decision, but if we\\u2019re not careful we can end up with a distributed monolith. Let\\u2019s see how to avoid that by building lightweight, loosely coupled microservices using Python, Flask, and Apache Kafka.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"descriptionSource":{"compiledSource":"var p=Object.defineProperty,u=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var c=(e,t,i)=>t in e?p(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,s=(e,t)=>{for(var i in t||(t={}))o.call(t,i)&&c(e,i,t[i]);if(a)for(var i of a(t))r.call(t,i)&&c(e,i,t[i]);return e},d=(e,t)=>u(e,h(t));var l=(e,t)=>{var i={};for(var n in e)o.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(e!=null&&a)for(var n of a(e))t.indexOf(n)<0&&r.call(e,n)&&(i[n]=e[n]);return i};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var n=i,{components:e}=n,t=l(n,[\"components\"]);return mdx(MDXLayout,d(s(s({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Building distributed systems can be challenging, and that's what microservices are. With traditional request/response based architectures, it is easy to end up with services that are tightly coupled, making them difficult to maintain and extend independently. While not a silver bullet, an event-based architecture makes it easier to maintain loose coupling. It also makes it easier to extend and evolve our systems without resorting to a rewrite. \"),mdx(\"p\",null,\"In this presentation, we will look at an example of an event-driven microservices application and discuss some things to consider when adopting this approach.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"sessionsAfter":[{"code":"E73V8G","title":"Automate the Boring Stuff with Slackbot(ver.2)","speakers":[{"code":"3TLEGG","name":"Takanori Suzuki","biography":"Takanori([@takanory](https://twitter.com/takanory)) is a Vice Chairperson of [PyCon JP Association](https://www.pycon.jp/).\r\nHe is also a Director of [BeProud Inc.](https://www.beproud.jp/careers/en/), and his title is \"Python Climber\".\r\nTakanori held PyCon JP 2014 to 2016 as the Chairperson.\r\nCurrently he teaches Python to beginners as a lecturer at [Python Boot Camp](https://pycamp.pycon.jp/) all over Japan.\r\nIn addition, he published several [Python books](https://www.amazon.co.jp/%E9%88%B4%E6%9C%A8%E3%81%9F%E3%81%8B%E3%81%AE%E3%82%8A/e/B00W95A036/).\r\nTananori plays trumpet, climbs boulder, loves Lego, ferrets and beer.","avatar":"https://program.europython.eu/media/avatars/sokidan1002x1002_QLUmEpL.jpg","slug":"takanori-suzuki","affiliation":"PyCon JP Association","homepage":null,"twitter":"takanory"}],"submission_type":"Talk","slug":"automate-the-boring-stuff-with-slackbot-ver-2","track":"Python Libraries","state":"confirmed","abstract":"Today, there are many tasks to repeat in the company/community.\r\nIn addition, we often use chat such as Slack for daily communication.\r\nSo, I created a chatbot([PyCon JP Bot](https://github.com/pyconjp/pyconjpbot)) to automate various boring tasks related to holding PyCon JP.\r\n\r\nIn this talk, I will first explain how to create a chatbot using [Bolt for Python](https://slack.dev/bolt-python/concepts).\r\nI will tell you how to registers bot's integration on Slack and how to create a simple bot in Python that responds to specific keywords.","abstract_as_a_tweet":"In this talk, I will first explain how to create a chatbot using Bolt for Python. I will tell you how to registers bot's integration on Slack and how to create a simple bot in Python that responds to specific keywords.","description":"In addition, we often use chat such as Slack for daily communication.\r\nSo, I created a chatbot([PyCon JP Bot](https://github.com/pyconjp/pyconjpbot)) to automate various boring tasks related to holding PyCon JP.\r\n\r\nIn this talk, I will first explain how to create a chatbot using [Bolt for Python](https://slack.dev/bolt-python/concepts).\r\nI will tell you how to registers bot's integration on Slack and how to create a simple bot in Python that responds to specific keywords.\r\n\r\nAnd as a specific case, I will explain how to make a bot command to perform the following operations and technical problems.\r\n\r\n- Emoji reaction\r\n- Calculator: SymPy\r\n- Karma(plusplus): Peewee\r\n- Search issues, display issue details: JIRA API\r\n- Create multiple issues from a template: JIRA API, Sheets Spreadsheet API\r\n- Account management of G Suite(user, alias, group and member): G Suite API\r\n- etc.","duration":"30","python_level":"some","domain_level":"some","delivery":"in-person","room":"Liffey B","start":"2022-07-13T15:30:00+01:00","end":"2022-07-13T16:00:00+01:00","talks_in_parallel":["NZJDKC","TF9Z8Q","VFEVKR","ZK7MVG","ZV9Y8M"],"talks_after":["39YWUH","98XE8Q","CQ7NBC","HJWZ37","HWMZZG","VAGHFS"],"next_talk_code":"39YWUH","prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/automate-the-boring-stuff-with-slackbot-ver-2"},{"code":"NZJDKC","title":"My journey using Docker as a development tool","speakers":[{"code":"HLJHD3","name":"Haseeb Majid","biography":"I am software engineer with around 5 years of professional experience. I am currently working for ZOE, a start-up in the healthcare space. Most of my experience is writing backend web services, using Python. I also extensive experience with Docker, Git and Linux.","avatar":"https://program.europython.eu/media/avatars/photo_5337101068850544252_y_1_iRZhyzu.jpg","slug":"haseeb-majid","affiliation":"ZOE","homepage":"http://haseebmajid.dev","twitter":null}],"submission_type":"Talk","slug":"my-journey-using-docker-as-a-development-tool","track":"Web","state":"confirmed","abstract":"I have been programming in Python for 5 years and almost from day one I've been using Docker with Python. Docker is now a widely used tool across the industry, due to its flexibility. It can be used as a tool to help deploy your code in production, say using Kubernetes. It can also be used as a tool to help develop code locally, with tools such as docker-compose.\r\n\r\nIt has taken me some time to discover various features and best practices when using Docker. Especially when it comes to using it for local development.\r\n\r\nIn this talk, I would like to go over a journey I have taken with Docker whilst working with it over several years. Starting from a single build step with a full-fat image, going over multi-stage Docker images. Showing you how you can use the same Dockerfile for development and production.","abstract_as_a_tweet":"In this talk, I would like to describe the journey I have taken with Docker and how I have learnt to use it with Python for local development.","description":"Docker is a prevalent tool in our industry today, it is widely used for several proposes. In this talk, I would like to describe the journey I have taken with Docker and how I have learnt to use it with Python for local development. The talk will mostly focus on how we can use Docker to run all of our development tasks, so we hardly need to have anything installed locally. To the point where you can work on almost any project with nothing more than an editor, your terminal and Docker. \r\n\r\nWe will look at how we can take a simple FastAPI web service and dockerise it. The talk will be a step by step guide, starting of with a simple Docker image and improving it iteratively. \r\n\r\n- Firstly use a simple Docker image\r\n- Then add docker-compose to dockerise its dependencies such as database\r\n- Then see how we can run tests (and other tasks) directly in our Docker container\r\n  - How to use this with Github Action\r\n- Then look at multistage builds\r\n   - Then split this into development and production image\r\n   -  How can we handle git dependencies that require an SSH key to be injected into the Docker image at build time\r\n\r\nI’d be a little more specific. Like, how we handle private pip packages in our docker images. This talk is for you if you are a casual user of Docker and know a few of its features but want to improve your Docker skills.\r\n \r\n This is NOT a talk for you if you are an expert in Docker and know most of its features.\r\n\r\n\r\nCode: https://gitlab.com/haseeb-slides/docker-as-a-dev-tool\r\nSlides: https://docker-as-a-dev-tool.haseebmajid.dev","duration":"30","python_level":"some","domain_level":"none","delivery":"in-person","room":"Wicklow Hall 1","start":"2022-07-13T15:30:00+01:00","end":"2022-07-13T16:00:00+01:00","talks_in_parallel":["E73V8G","TF9Z8Q","VFEVKR","ZK7MVG","ZV9Y8M"],"talks_after":["39YWUH","98XE8Q","CQ7NBC","HJWZ37","HWMZZG","VAGHFS"],"next_talk_code":"VAGHFS","prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/my-journey-using-docker-as-a-development-tool"},{"code":"TF9Z8Q","title":"HPy: a better C API for Python","speakers":[{"code":"T8FUFL","name":"Ronan Lamy","biography":"I'm a freelance software developer and open-source consultant. I'm a cofounder of HPy and I've been a PyPy core developer since 2012.","avatar":"https://www.gravatar.com/avatar/a8f4ba9cf0d41e36ee03ae2c487b170c","slug":"ronan-lamy","affiliation":"Self-employed","homepage":null,"twitter":"@ronanlamy"}],"submission_type":"Talk","slug":"hpy-a-better-c-api-for-python","track":"(c)Python Internals","state":"confirmed","abstract":"The official Python C API is specific to the current implementation of CPython. It has served us well and forms the basis upon which our entire extension ecosystem rests. \r\nHowever, it exposes a lot of internal details which makes it hard to implement it for other Python implementations (e.g. PyPy, GraalPython, Jython, IronPython, etc.), and \r\nprevents major evolutions of CPython itself, such as using a GC instead of refcounting, or removing the GIL.\r\n\r\nThis is where HPy comes in. It's a new C API designed from the ground up according to the following goals:\r\n* running much faster on alternate implementations, and at native speed on CPython\r\n* making it possible to compile a single binary which runs unmodified on all supported Python implementations and versions\r\n* being simpler and more manageable than the Python/C API\r\n* providing an improved debugging experience.\r\n\r\nWe'll discuss its current status and show how existing extensions can be gradually ported to it.","abstract_as_a_tweet":"HPy is a new C API for Python. Unlike the standard one, it isn't tied to CPython implementation details. It is therefore fully compatible with alternate implementations and with any future changes to CPython itself.","description":"","duration":"30","python_level":"expert","domain_level":"some","delivery":"in-person","room":"Liffey A","start":"2022-07-13T15:30:00+01:00","end":"2022-07-13T16:00:00+01:00","talks_in_parallel":["E73V8G","NZJDKC","VFEVKR","ZK7MVG","ZV9Y8M"],"talks_after":["39YWUH","98XE8Q","CQ7NBC","HJWZ37","HWMZZG","VAGHFS"],"next_talk_code":"98XE8Q","prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/hpy-a-better-c-api-for-python"},{"code":"VFEVKR","title":"Making AI Happen at Your Company","speakers":[{"code":"8F38DV","name":"Alexander CS Hendorf","biography":null,"avatar":"https://program.europython.eu/media/avatars/hendorf-2020_square_1LJOKAe.jpg","slug":"alexander-cs-hendorf","affiliation":null,"homepage":null,"twitter":null}],"submission_type":"Talk","slug":"making-ai-happen-at-your-company","track":"~None of the above","state":"confirmed","abstract":"All one needs is strategy, skill and resources to make digitalization and AI happen. So why is everything taking so long? Shouldn’t you all be finished yesterday already? An honest talk about how to address the complexity of making AI happen in enterprises.","abstract_as_a_tweet":"All one needs is strategy, skill and resources to make digitalization and AI happen. So why is everything taking so long? Shouldn’t you all be finished yesterday already?","description":"Many incumbents are transitioning to new technologies while their businesses operate on systems that are years or decades old. Introducing new technologies is not just about introducing Open Source or introducing community culture or working agile or SCRUM or explaining the complicated technology stuff to executives. The truth is: it requires all of it and likely even more. Mastering innovation requires having many balls in the air at once.\r\nIn this talk I’ll present a transformation use case of an established player including our best practices and anti-patterns.\r\nWe will discuss the following aspects:\r\n\r\n* From idea to strategy\r\n* Assessing the status quo\r\n* Introducing Python and Open Source and what to use (or not)\r\n* Legacy is in the the house, still\r\n* Getting all departments on the same page\r\n* Introducing a community-driven collaborative culture","duration":"30","python_level":"none","domain_level":"some","delivery":"in-person","room":"Liffey Hall 1","start":"2022-07-13T15:30:00+01:00","end":"2022-07-13T16:00:00+01:00","talks_in_parallel":["E73V8G","NZJDKC","TF9Z8Q","ZK7MVG","ZV9Y8M"],"talks_after":["39YWUH","98XE8Q","CQ7NBC","HJWZ37","HWMZZG","VAGHFS"],"next_talk_code":"CQ7NBC","prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/making-ai-happen-at-your-company"},{"code":"ZK7MVG","title":"Property-based testing the Python way","speakers":[{"code":"TEJVNB","name":"Emma Saroyan","biography":"Emma is a developer advocate at Alpaca. She enjoys sharing her knowledge and learning from fellow developers.","avatar":"https://program.europython.eu/media/avatars/photo_bU7CgTE.jpg","slug":"emma-saroyan","affiliation":"Alpaca markets","homepage":null,"twitter":null}],"submission_type":"Talk","slug":"property-based-testing-the-python-way","track":"Testing","state":"confirmed","abstract":"What if I told you you could write simpler tests but still get better results ? \r\n\r\nWhat if I told you can automatically generate your test data ?\r\n\r\nThis may sound difficult to your traditional testing approach but can be easily done with property-based testing. \r\n\r\nProperty-based testing allows a range of inputs to be tested on a given aspect of a software property, abstracting away the details.\r\n\r\nIn the world of Python you can accomplish this with Hypothesis, the Python library used for property-based testing. \r\n\r\nHypothesis helps you design cleaner and clever test suites.","abstract_as_a_tweet":"Design cleaner and clever test suites with Hypothesis, the Python library used for property-based testing.","description":"This is an introductory talk about property-based testing. The talk requires some previous knowledge about testing to make the most out of it but if you are new and curious I think you would get something out of it.\r\n\r\nThe talk approaches a simple problem from two different testing perspectives. Giving you an idea about property-based testing and how it’s different from the traditional approach with Python. \r\n\r\nThe main focus of the topic would be Hypothesis and how you can achieve your testing goals with it. \r\n\r\nBy the end of this talk you would have a solid understanding of property-based testing with Hypothesis, that would help you decide which testing approach fits your need. \r\n\r\n\r\nGiven below is a rough overview of the talk structure:\r\n\r\n- The testing problem - This is where you would explain the problem statement \r\n- The traditional approach\r\n- Cons of traditional approach\r\n- What is property-based testing ? \r\n- Intro to Hypothesis \r\n- Same problem solution with Hypothesis\r\n- Why choose Hypothesis as a go-to property based testing tool ? \r\n- Parametrized testing with Pytest vs Hypothesis approach \r\n- When or when not to use property based testing \r\n- How can you adopt `hypothesis` in your code base ? Some opinions here.","duration":"30","python_level":"some","domain_level":"some","delivery":"remote","room":"Liffey Hall 2","start":"2022-07-13T15:30:00+01:00","end":"2022-07-13T16:00:00+01:00","talks_in_parallel":["E73V8G","NZJDKC","TF9Z8Q","VFEVKR","ZV9Y8M"],"talks_after":["39YWUH","98XE8Q","CQ7NBC","HJWZ37","HWMZZG","VAGHFS"],"next_talk_code":"HJWZ37","prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/property-based-testing-the-python-way"},{"code":"ZV9Y8M","title":"What happens when you import a module?","speakers":[{"code":"VZM8L3","name":"Reuven M. Lerner","biography":"Reuven is a full-time trainer in Python and data science, teaching companies around the world via in-person, online, and recorded courses. He is the author of both \"Python Workout\" and \"Pandas Workout,\" published by Manning, and writes the free, weekly \"Better developers\" newsletter read by more than 25,000 developers around the world. He lives with his wife and children in Modi'in, Israel.","avatar":"https://program.europython.eu/media/avatars/reuven-headshot_eNVHHfd.jpg","slug":"reuven-m-lerner","affiliation":"Lerner Consulting","homepage":"https://lerner.co.il/","twitter":"reuvenmlerner"}],"submission_type":"Talk","slug":"what-happens-when-you-import-a-module","track":"(c)Python Internals","state":"confirmed","abstract":"It's a rare program that doesn't include at least one \"import\" statement. But what actually happens when we import a module? How does Python find our file, decide whether to load it, and then keep track of it in memory? In this talk, I'll walk you through what happens when you \"import\" a module into Python, revealing the complexities of something seemingly simple that we use every day.","abstract_as_a_tweet":"What happens when you import a module in Python? Let's pull back the curtain and find out!","description":"Modules are a key feature of Python, allowing us to easily reuse our own code and take advantage of publicly available modules from PyPI. It's a rare program that doesn't include at least one \"import\" statement. But what actually happens when we import a module? How does Python find our file? How does it decide whether it should even try to find our module? And after it finds our module file, how does Python load it into memory, assigning to its attributes?\r\n\r\nIn this talk, I'll walk you through what happens when you \"import\" a module into Python. The mechanism is surprisingly complex, in no small part because it has to take so many possibilities into consideration. We'll talk about finders and loaders, and about the many ways in which you can customize the module-loading mechanism if you find a need to do so.\r\n\r\nIf you've ever imported a module, then this talk will pull back the curtain a bit, helping you to understand what's happening under the hood.","duration":"30","python_level":"some","domain_level":"none","delivery":"in-person","room":"The Auditorium","start":"2022-07-13T15:30:00+01:00","end":"2022-07-13T16:00:00+01:00","talks_in_parallel":["E73V8G","NZJDKC","TF9Z8Q","VFEVKR","ZK7MVG"],"talks_after":["39YWUH","98XE8Q","CQ7NBC","HJWZ37","HWMZZG","VAGHFS"],"next_talk_code":"HWMZZG","prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/what-happens-when-you-import-a-module"}],"sessionsInParallel":[{"code":"7DJJMK","title":"PySnooper: Never use print for debugging again","speakers":[{"code":"RJ7N8Z","name":"Ram Rachum","biography":"Ram Rachum is a software developer specializing in Python, and a Fellow of the Python Software Foundation.\r\n\r\nWhen he's not writing his biography in the third person, Ram is doing Python infrastructure work for clients, giving Python training to teams that would like to deepen their Python skills, and organizing the bi-monthly PyWeb-IL conference.","avatar":"https://www.gravatar.com/avatar/d24c45635a5171615a7cdb936f36daad","slug":"ram-rachum","affiliation":"Independent","homepage":"https://ram.rachum.com/","twitter":null}],"submission_type":"Talk","slug":"pysnooper-never-use-print-for-debugging-again","track":"Software Engineering & Architecture","state":"confirmed","abstract":"I had an idea for a debugging solution for Python that doesn't require complicated configuration like PyCharm. I released PySnooper as a cute little open-source project that does that, and to my surprise, it became a huge hit overnight, hitting the top of Hacker News, r/python and GitHub trending.\r\nIn this talk I'll go into:\r\n\r\n* How PySnooper can help you debug your code.\r\n* How you can write your own debugging / code intelligence tools.\r\n* How to make your open-source project go viral.\r\n* How to use PuDB, another debugging solution, to find bugs in your code.","abstract_as_a_tweet":"PySnooper: Never use print for debugging again. Learn about an indispensable tool for finding bugs in your Python code.","description":"","duration":"30","python_level":"some","domain_level":"none","delivery":"in-person","room":"Liffey A","start":"2022-07-13T14:35:00+01:00","end":"2022-07-13T15:05:00+01:00","talks_in_parallel":["AKJCWL","BL9NGV","DZZ8X9","P3EYQE"],"talks_after":["E73V8G","NZJDKC","TF9Z8Q","VFEVKR","ZK7MVG","ZV9Y8M"],"next_talk_code":"TF9Z8Q","prev_talk_code":"Q3FPVG","website_url":"https://ep2022.europython.eu/session/pysnooper-never-use-print-for-debugging-again"},{"code":"AKJCWL","title":"Dance with shadows: stubs, patch and mock","speakers":[{"code":"CLQCZS","name":"María Andrea Vignau","biography":"I gave many talks in spanish and two in english. I come from Argentina and gave five talks on PyCon Argentina, gave a talk in Europython https://youtu.be/s7110IaMEOs, a charla at PyCon Charlas 2019, and this year in PyCon España and other for Basis Technology on extending forensic software using python (https://youtu.be/ocuFZ8RA1p8). I was also organizer in 9 events in my city, Resistencia Chaco, collaborator in many others, including mentoring at PyCon Charlas 2022.","avatar":"https://program.europython.eu/media/avatars/me_-_saco_btsKqZy.jpg","slug":"maria-andrea-vignau","affiliation":"Shiphero LLC","homepage":"https://mavignau.gitlab.io/","twitter":"mavignau"}],"submission_type":"Talk","slug":"dance-with-shadows-stubs-patch-and-mock","track":"Testing","state":"confirmed","abstract":"To ensure quality, automated testing is a must. But sometimes is impossible or very expensive to use real environments. In this case, you can isolate some parts of a system and use fake simulated objects.","abstract_as_a_tweet":"A comprehensive but simple introduction to the use of fake objects. Explain how to inject this object and use in test using patch and the awesome and powerful mock objects . Last, I present some very interesting specialized libraries for mocking on web develop","description":"A comprehensive but simple introduction to the use of fake objects. Explain how to inject this object and use in test using patch and the awesome and powerful mock objects . Last, I present some very interesting specialized libraries for mocking on web development.\r\n\r\nOutline\r\n\r\n0:00 I present the key factors to use fake objects, and present some dangers. \r\n\r\n3:00 Discuss some wanted characteristics in this kind of components. \r\n\r\n6:00 Patching: how to do that and some common mistakes. After that I present patch scopes and some disadvantage in the use of this technique. \r\n\r\n10:00 Inverse dependency as an possible alternative to patch \r\n\r\n13:00 Mocks properties: return value, side effect and specs. Using mocks as spy functions or wrappers. Asserting on callings. \r\n\r\n21:00 Using special libraries for mocking. Presenting pyvcr and moto.","duration":"30","python_level":"some","domain_level":"none","delivery":"remote","room":"Liffey Hall 2","start":"2022-07-13T14:35:00+01:00","end":"2022-07-13T15:05:00+01:00","talks_in_parallel":["7DJJMK","BL9NGV","DZZ8X9","P3EYQE"],"talks_after":["E73V8G","NZJDKC","TF9Z8Q","VFEVKR","ZK7MVG","ZV9Y8M"],"next_talk_code":"ZK7MVG","prev_talk_code":"NVKPEJ","website_url":"https://ep2022.europython.eu/session/dance-with-shadows-stubs-patch-and-mock"},{"code":"BL9NGV","title":"Protocols - Static duck typing for decoupled code","speakers":[{"code":"V7BWTA","name":"Ran Zvi","biography":"I'm a software engineer currently living in USA. I enjoy learning new languages and learning about them.","avatar":"https://program.europython.eu/media/avatars/image1_eD11cms.jpeg","slug":"ran-zvi","affiliation":"BlueVine","homepage":null,"twitter":null}],"submission_type":"Talk","slug":"protocols-static-duck-typing-for-decoupled-code","track":"Python Libraries","state":"confirmed","abstract":"Python introduces Protocols to support static duck typing, where static type checkers (mypy) and other tools can verify code correctness prior to runtime.\r\n\r\nThis was added in order to circumvent explicitly inheriting from ABCs (Abstract base classes) which is \"unpythonic and unlike what one would normally do in idiomatic dynamically typed Python code\" - according to PEP 544.\r\n\r\nWe will explore the different use cases for Protocols and how to use them correctly.","abstract_as_a_tweet":"Python Protocols - Structural subtyping for decoupled and Pythonic code","description":"Outline\r\n\r\n- What are protocols:\r\n   - Structural vs nominal typing\r\n   - Static duck typing\r\n   - Difference between ABCs and protocols\r\n\r\n- Examples\r\n    - Simple example\r\n    - Extending protocols\r\n\r\n- Use cases\r\n    - Dynamically typed code\r\n    - Library types\r\n\r\nDuring this talk we will go over Protocols and how they can be employed to achieve better code. Take the following code snippet as an example:\r\n\r\n```python\r\nfrom typing import Sized, Iterable, Iterator\r\n\r\nclass Bucket(Sized, Iterable[int]):\r\n    ...\r\n    def __len__(self) -> int: ...\r\n    def __iter__(self) -> Iterator[int]: ...\r\n```\r\n\r\nThe problem here is that you must explicitly inherit these bases classes to register them as subtypes of their parents.\r\n\r\nThis is particularly difficult to do with library types as the type objects may be hidden deep in the implementation of the library. Also, extensive use of ABCs might impose additional runtime costs.\r\n\r\nConsider the following snippet as a solution:\r\n\r\n```python\r\nfrom typing import Iterator, Iterable\r\n\r\nclass Bucket:\r\n    ...\r\n    def __len__(self) -> int: ...\r\n    def __iter__(self) -> Iterator[int]: ...\r\n\r\ndef collect(items: Iterable[int]) -> int: ...\r\nresult: int = collect(Bucket())  # Passes type check\r\n```\r\n\r\nProtocols enable you to pass static type checking implicitly.","duration":"30","python_level":"some","domain_level":"some","delivery":"remote","room":"Liffey B","start":"2022-07-13T14:35:00+01:00","end":"2022-07-13T15:05:00+01:00","talks_in_parallel":["7DJJMK","AKJCWL","DZZ8X9","P3EYQE"],"talks_after":["E73V8G","NZJDKC","TF9Z8Q","VFEVKR","ZK7MVG","ZV9Y8M"],"next_talk_code":"E73V8G","prev_talk_code":"L7PFLV","website_url":"https://ep2022.europython.eu/session/protocols-static-duck-typing-for-decoupled-code"},{"code":"DZZ8X9","title":"Classifying LEGO Bricks with Machine Learning","speakers":[{"code":"8DK3QT","name":"Piotr Rybak","biography":"Piotr Rybak is a Machine Learning Researcher with experience in industry and academia. In his work, he mainly focuses on Natural Language Understanding but once in a while, he likes to dive into other topics. In his free time, he's a big fan of board games, Lego bricks, and boulder climbing.","avatar":"https://program.europython.eu/media/avatars/photo_saoAk1U.jpg","slug":"piotr-rybak","affiliation":"Wrocław University of Science and Technology","homepage":null,"twitter":null}],"submission_type":"Talk","slug":"classifying-lego-bricks-with-machine-learning","track":"PyData: Deep Learning, NLP, CV","state":"confirmed","abstract":"There are over 70 000 different Lego bricks and they appear in almost 200 different colors. Even the most hardcore AFOLs (Adult Fan of Lego) don’t know all of them. Let alone be able to recognize them. So I got curious whether it’s possible to create an application that can recognize the particular brick using only its photo.","abstract_as_a_tweet":"Building an app that recognizes 70 000 different Lego bricks!","description":"During this talk, I will walk you through my journey to create the Lego bricks recognition application in Python. I will start with dataset creation and introduce some Lego-specific concepts and resources. Then, I will explain a few different Machine Learning approaches to solve Lego bricks recognition task – classification, detection, and metric learning. Finally, I will show what has worked, what hasn’t, and how you can play with it yourself.","duration":"30","python_level":"some","domain_level":"some","delivery":"in-person","room":"Liffey Hall 1","start":"2022-07-13T14:35:00+01:00","end":"2022-07-13T15:05:00+01:00","talks_in_parallel":["7DJJMK","AKJCWL","BL9NGV","P3EYQE"],"talks_after":["E73V8G","NZJDKC","TF9Z8Q","VFEVKR","ZK7MVG","ZV9Y8M"],"next_talk_code":"VFEVKR","prev_talk_code":"HLYETC","website_url":"https://ep2022.europython.eu/session/classifying-lego-bricks-with-machine-learning"}]},"__N_SSG":true}