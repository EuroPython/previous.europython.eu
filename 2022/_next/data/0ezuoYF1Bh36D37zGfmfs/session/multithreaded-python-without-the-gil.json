{"pageProps":{"path":"/session/multithreaded-python-without-the-gil","session":{"code":"CEPSYS","title":"Multithreaded Python without the GIL","speakers":[{"code":"DMWLH3","name":"Sam Gross","biography":"Sam Gross is a software engineer at Meta AI. He is a co-author of PyTorch, an open-source Python machine learning framework. He holds M.Eng. and B.S. degrees in computer science from the Massachusetts Institute of Technology.\r\n\r\n\r\n  Since moving to DIAS he has worked on the development of calibration and\r\n  software tools for the Mid-Infrared Instrument (MIRI) on Webb. MIRI is an\r\n  international project comprising a consortium of European partner institutes,\r\n  including DIAS, the European Space Agency, and partners in the US.\r\n\r\n\r\n  He works on many aspects of MIRI including the calibration of the MIRI Medium\r\n  Resolution Spectrometer, development of the MIRI simulator, MIRI commissioning\r\n  activities and analysis tools, and will support MIRI commissioning at the Webb\r\n  Mission Operations Center at the Space Telescope Science Institute in\r\n  Baltimore.","avatar":null,"slug":"sam-gross","affiliation":"Meta AI","homepage":null,"twitter":null,"biographySource":{"compiledSource":"var m=Object.defineProperty,I=Object.defineProperties;var l=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var c=(e,n,o)=>n in e?m(e,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[n]=o,a=(e,n)=>{for(var o in n||(n={}))s.call(n,o)&&c(e,o,n[o]);if(i)for(var o of i(n))r.call(n,o)&&c(e,o,n[o]);return e},p=(e,n)=>I(e,l(n));var u=(e,n)=>{var o={};for(var t in e)s.call(e,t)&&n.indexOf(t)<0&&(o[t]=e[t]);if(e!=null&&i)for(var t of i(e))n.indexOf(t)<0&&r.call(e,t)&&(o[t]=e[t]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var t=o,{components:e}=t,n=u(t,[\"components\"]);return mdx(MDXLayout,p(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Sam Gross is a software engineer at Meta AI. He is a co-author of PyTorch, an open-source Python machine learning framework. He holds M.Eng. and B.S. degrees in computer science from the Massachusetts Institute of Technology.\"),mdx(\"p\",null,`  Since moving to DIAS he has worked on the development of calibration and\nsoftware tools for the Mid-Infrared Instrument (MIRI) on Webb. MIRI is an\ninternational project comprising a consortium of European partner institutes,\nincluding DIAS, the European Space Agency, and partners in the US.`),mdx(\"p\",null,`  He works on many aspects of MIRI including the calibration of the MIRI Medium\nResolution Spectrometer, development of the MIRI simulator, MIRI commissioning\nactivities and analysis tools, and will support MIRI commissioning at the Webb\nMission Operations Center at the Space Telescope Science Institute in\nBaltimore.`))}MDXContent.isMDXComponent=!0;\n","scope":{}}}],"submission_type":"Keynote","slug":"multithreaded-python-without-the-gil","track":"Keynotes","state":"confirmed","abstract":"CPython’s “Global Interpreter Lock”, or “GIL”, prevents multiple threads from executing Python code in parallel. The GIL was added to Python in 1992 together with the original support for threads in order to protect access to the interpreter’s shared state.\r\n\r\nPython supports a number of ways to enable parallelism within the constraints of the GIL, but they come with significant limitations. Imagine if you could avoid the startup time of joblib workers, the multiprocess instability of PyTorch’s DataLoaders, and the overhead of pickling data for inter-process communication.\r\n\r\nThe “nogil” project aims to remove the GIL from CPython to make multithreaded Python programs more efficient, while maintaining backward compatibility and single-threaded performance. It exists as a fork, but the eventual goal is to contribute these changes upstream.\r\n\r\nThis talk will cover the changes to Python to let it run efficiently without the GIL and what these changes mean for Python programmers and extension authors.","abstract_as_a_tweet":"The “nogil” project aims to remove the GIL from CPython to make multithreaded Python programs more efficient, while maintaining backward compatibility and single-threaded performance.","description":"","duration":"45","python_level":"some","domain_level":"none","delivery":"in-person","room":"The Auditorium","start":"2022-07-15T09:15:00+01:00","end":"2022-07-15T10:00:00+01:00","talks_in_parallel":[],"talks_after":[],"next_talk_code":null,"prev_talk_code":null,"website_url":"https://ep2022.europython.eu/session/multithreaded-python-without-the-gil","type":"Keynote","abstractSource":{"compiledSource":"var l=Object.defineProperty,m=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var h=(t,e,o)=>e in t?l(t,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[e]=o,r=(t,e)=>{for(var o in e||(e={}))i.call(e,o)&&h(t,o,e[o]);if(n)for(var o of n(e))s.call(e,o)&&h(t,o,e[o]);return t},p=(t,e)=>m(t,u(e));var c=(t,e)=>{var o={};for(var a in t)i.call(t,a)&&e.indexOf(a)<0&&(o[a]=t[a]);if(t!=null&&n)for(var a of n(t))e.indexOf(a)<0&&s.call(t,a)&&(o[a]=t[a]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var a=o,{components:t}=a,e=c(a,[\"components\"]);return mdx(MDXLayout,p(r(r({},layoutProps),e),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"CPython\\u2019s \\u201CGlobal Interpreter Lock\\u201D, or \\u201CGIL\\u201D, prevents multiple threads from executing Python code in parallel. The GIL was added to Python in 1992 together with the original support for threads in order to protect access to the interpreter\\u2019s shared state.\"),mdx(\"p\",null,\"Python supports a number of ways to enable parallelism within the constraints of the GIL, but they come with significant limitations. Imagine if you could avoid the startup time of joblib workers, the multiprocess instability of PyTorch\\u2019s DataLoaders, and the overhead of pickling data for inter-process communication.\"),mdx(\"p\",null,\"The \\u201Cnogil\\u201D project aims to remove the GIL from CPython to make multithreaded Python programs more efficient, while maintaining backward compatibility and single-threaded performance. It exists as a fork, but the eventual goal is to contribute these changes upstream.\"),mdx(\"p\",null,\"This talk will cover the changes to Python to let it run efficiently without the GIL and what these changes mean for Python programmers and extension authors.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"descriptionSource":{"compiledSource":"var M=Object.defineProperty,X=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var u=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var s=(o,t,n)=>t in o?M(o,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[t]=n,p=(o,t)=>{for(var n in t||(t={}))r.call(t,n)&&s(o,n,t[n]);if(u)for(var n of u(t))a.call(t,n)&&s(o,n,t[n]);return o},y=(o,t)=>X(o,c(t));var D=(o,t)=>{var n={};for(var e in o)r.call(o,e)&&t.indexOf(e)<0&&(n[e]=o[e]);if(o!=null&&u)for(var e of u(o))t.indexOf(e)<0&&a.call(o,e)&&(n[e]=o[e]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var e=n,{components:o}=e,t=D(e,[\"components\"]);return mdx(MDXLayout,y(p(p({},layoutProps),t),{components:o,mdxType:\"MDXLayout\"}))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"sessionsAfter":[],"sessionsInParallel":[]},"__N_SSG":true}